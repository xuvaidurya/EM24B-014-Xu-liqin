{
  "hash": "6416d0e7e4113081a81e2bf0fd043970",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"01_Getting_&_Knowing_Your_Data -> Chipotle\"\noutput: \n  html_document:\n    toc: FALSE\n---\n\n\n\n\nThis time we are going to pull data directly from the internet.\nSpecial thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\n### Step 1. Import the necessary libraries\n\n::: {#ffdd615c .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n### Step 2. Import the dataset from this [address](https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv). \n\n### Step 3. Assign it to a variable called chipo.\n\n::: {#862e599f .cell execution_count=2}\n``` {.python .cell-code}\nchipo = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv', sep= '\\t')\n```\n:::\n\n\n### Step 4. See the first 10 entries\n\n::: {#d632fe79 .cell execution_count=3}\n``` {.python .cell-code}\nchipo.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>quantity</th>\n      <th>item_name</th>\n      <th>choice_description</th>\n      <th>item_price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Chips and Fresh Tomato Salsa</td>\n      <td>NaN</td>\n      <td>$2.39</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Izze</td>\n      <td>[Clementine]</td>\n      <td>$3.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Nantucket Nectar</td>\n      <td>[Apple]</td>\n      <td>$3.39</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Chips and Tomatillo-Green Chili Salsa</td>\n      <td>NaN</td>\n      <td>$2.39</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>2</td>\n      <td>Chicken Bowl</td>\n      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n      <td>$16.98</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>1</td>\n      <td>Chicken Bowl</td>\n      <td>[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...</td>\n      <td>$10.98</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>1</td>\n      <td>Side of Chips</td>\n      <td>NaN</td>\n      <td>$1.69</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4</td>\n      <td>1</td>\n      <td>Steak Burrito</td>\n      <td>[Tomatillo Red Chili Salsa, [Fajita Vegetables...</td>\n      <td>$11.75</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>4</td>\n      <td>1</td>\n      <td>Steak Soft Tacos</td>\n      <td>[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...</td>\n      <td>$9.25</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>5</td>\n      <td>1</td>\n      <td>Steak Burrito</td>\n      <td>[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...</td>\n      <td>$9.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Step 5. What is the number of observations in the dataset?\n\n::: {#808c6459 .cell execution_count=4}\n``` {.python .cell-code}\n# Solution 1\n\nchipo.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(4622, 5)\n```\n:::\n:::\n\n\n::: {#b77d6842 .cell execution_count=5}\n``` {.python .cell-code}\n# Solution 2\n\nchipo.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4622 entries, 0 to 4621\nData columns (total 5 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   order_id            4622 non-null   int64 \n 1   quantity            4622 non-null   int64 \n 2   item_name           4622 non-null   object\n 3   choice_description  3376 non-null   object\n 4   item_price          4622 non-null   object\ndtypes: int64(2), object(3)\nmemory usage: 180.7+ KB\n```\n:::\n:::\n\n\n### Step 6. What is the number of columns in the dataset?\n\n::: {#fb07301f .cell execution_count=6}\n``` {.python .cell-code}\nchipo.shape[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n5\n```\n:::\n:::\n\n\n### Step 7. Print the name of all the columns.\n\n::: {#d7662c01 .cell execution_count=7}\n``` {.python .cell-code}\nchipo.head(0)\n##chipo.columns   \n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>quantity</th>\n      <th>item_name</th>\n      <th>choice_description</th>\n      <th>item_price</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Step 8. How is the dataset indexed?\n\n::: {#15b82ee7 .cell execution_count=8}\n``` {.python .cell-code}\nchipo.index\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nRangeIndex(start=0, stop=4622, step=1)\n```\n:::\n:::\n\n\n### Step 9. Which was the most-ordered item? \n\n::: {#a2df93ec .cell execution_count=9}\n``` {.python .cell-code}\nchipo.groupby(by=\"item_name\").sum().sort_values('quantity',ascending=False).head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>quantity</th>\n      <th>choice_description</th>\n      <th>item_price</th>\n    </tr>\n    <tr>\n      <th>item_name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chicken Bowl</th>\n      <td>713926</td>\n      <td>761</td>\n      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n      <td>$16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Step 10. For the most-ordered item, how many items were ordered?\n\n::: {#06379707 .cell execution_count=10}\n``` {.python .cell-code}\nchipo.groupby(by=\"item_name\").sum().sort_values('quantity',ascending=False).head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>quantity</th>\n      <th>choice_description</th>\n      <th>item_price</th>\n    </tr>\n    <tr>\n      <th>item_name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chicken Bowl</th>\n      <td>713926</td>\n      <td>761</td>\n      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n      <td>$16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Step 11. What was the most ordered item in the choice_description column?\n\n::: {#8d5fc731 .cell execution_count=11}\n``` {.python .cell-code}\nchipo.groupby(by=\"choice_description\").sum().sort_values('quantity',ascending=False).head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>quantity</th>\n      <th>item_name</th>\n      <th>item_price</th>\n    </tr>\n    <tr>\n      <th>choice_description</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>[Diet Coke]</th>\n      <td>123455</td>\n      <td>159</td>\n      <td>Canned SodaCanned SodaCanned Soda6 Pack Soft D...</td>\n      <td>$2.18 $1.09 $1.09 $6.49 $2.18 $1.25 $1.09 $6.4...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Step 12. How many items were orderd in total?\n\n::: {#134a2552 .cell execution_count=12}\n``` {.python .cell-code}\nchipo.item_name.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n4622\n```\n:::\n:::\n\n\n### Step 13. Turn the item price into a float\n#### Step 13.a. Check the item price type\n\n::: {#9e85e5c4 .cell execution_count=13}\n``` {.python .cell-code}\nchipo.item_price.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ndtype('O')\n```\n:::\n:::\n\n\n#### Step 13.b. Create a lambda function and change the type of item price\n\n::: {#97f83d59 .cell execution_count=14}\n``` {.python .cell-code}\ndollarizer = lambda x: float(x[1:-1])\nchipo.item_price = chipo.item_price.apply(dollarizer)\n```\n:::\n\n\n#### Step 13.c. Check the item price type\n\n::: {#fc1d296c .cell execution_count=15}\n``` {.python .cell-code}\nchipo.item_price.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n### Step 14. How much was the revenue for the period in the dataset?\n\n::: {#98b52b36 .cell execution_count=16}\n``` {.python .cell-code}\nrevenue =  (chipo.item_price * chipo.quantity).sum()\nprint('Revenue is : $ '+ str(revenue))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRevenue is : $ 39237.02\n```\n:::\n:::\n\n\n### Step 15. How many orders were made in the period?\n\n::: {#537683ff .cell execution_count=17}\n``` {.python .cell-code}\nchipo.order_id.value_counts().count()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n1834\n```\n:::\n:::\n\n\n### Step 16. What is the average revenue amount per order?\n\n::: {#99b5c215 .cell execution_count=18}\n``` {.python .cell-code}\n# Solution 1\n\nchipo['revenue'] = chipo['quantity'] * chipo['item_price']\norder_grouped = chipo.groupby(by=['order_id']).sum()\norder_grouped['revenue'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n21.39423118865867\n```\n:::\n:::\n\n\n### Step 17. How many different items are sold?\n\n::: {#43691984 .cell execution_count=19}\n``` {.python .cell-code}\nchipo.item_name.value_counts().count()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n50\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Chipotle_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}