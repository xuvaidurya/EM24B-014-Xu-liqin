{
  "hash": "69c222eacd754bd103606cbdeae2ddba",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Xuliqin Practice1114\"\noutput: \n  html_document:\n    toc: FALSE\n---\n\n::: {#508703b9 .cell execution_count=1}\n``` {.python .cell-code}\n%pip install openpyxl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequirement already satisfied: openpyxl in d:\\program files\\python3.12.7\\lib\\site-packages (3.1.5)Note: you may need to restart the kernel to use updated packages.\n\nRequirement already satisfied: et-xmlfile in d:\\program files\\python3.12.7\\lib\\site-packages (from openpyxl) (2.0.0)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n[notice] A new release of pip is available: 24.2 -> 24.3.1\n[notice] To update, run: pythonw.exe -m pip install --upgrade pip\n```\n:::\n:::\n\n\n::: {#0b3f3534 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\nLetsPlot.setup_html(no_js=True)\n\n### You don't need to use these settings yourself\n### — they are just here to make the book look nicer!\n# Set the plot style for prettier charts:\nplt.style.use(\"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\")\n```\n:::\n\n\n::: {#95573193 .cell execution_count=3}\n``` {.python .cell-code}\ndata_np = pd.read_excel(\n    \"./file/doing-economics-datafile-working-in-excel-project-2.xls\",\n    usecols=\"A:Q\",\n    header=1,\n    index_col=\"Period\",\n)\ndata_n = data_np.iloc[:10, :].copy()\ndata_p = data_np.iloc[14:24, :].copy()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nD:\\Program Files\\python3.12.7\\Lib\\site-packages\\openpyxl\\worksheet\\_reader.py:329: UserWarning: Unknown extension is not supported and will be removed\n  warn(msg)\n```\n:::\n:::\n\n\n::: {#7b05c685 .cell execution_count=4}\n``` {.python .cell-code}\ntest_data = {\n    \"City A\": [14.1, 14.1, 13.7],\n    \"City B\": [11.0, 12.6, 12.1],\n}\n\n\n# Original dataframe\ntest_df = pd.DataFrame.from_dict(test_data)\n# A copy of the dataframe\ntest_copy = test_df.copy()\n# A pointer to the dataframe\ntest_pointer = test_df\n\n\ntest_pointer.iloc[1, 1] = 99\n```\n:::\n\n\n::: {#8060825c .cell execution_count=5}\n``` {.python .cell-code}\nprint(\"test_df=\")\nprint(f\"{test_df}\\n\")\nprint(\"test_copy=\")\nprint(f\"{test_copy}\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntest_df=\n   City A  City B\n0    14.1    11.0\n1    14.1    99.0\n2    13.7    12.1\n\ntest_copy=\n   City A  City B\n0    14.1    11.0\n1    14.1    12.6\n2    13.7    12.1\n\n```\n:::\n:::\n\n\n::: {#699ca119 .cell execution_count=6}\n``` {.python .cell-code}\ndata_n.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 10 entries, 1 to 10\nData columns (total 16 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   Copenhagen       10 non-null     object\n 1   Dnipropetrovs’k  10 non-null     object\n 2   Minsk            10 non-null     object\n 3   St. Gallen       10 non-null     object\n 4   Muscat           10 non-null     object\n 5   Samara           10 non-null     object\n 6   Zurich           10 non-null     object\n 7   Boston           10 non-null     object\n 8   Bonn             10 non-null     object\n 9   Chengdu          10 non-null     object\n 10  Seoul            10 non-null     object\n 11  Riyadh           10 non-null     object\n 12  Nottingham       10 non-null     object\n 13  Athens           10 non-null     object\n 14  Istanbul         10 non-null     object\n 15  Melbourne        10 non-null     object\ndtypes: object(16)\nmemory usage: 1.3+ KB\n```\n:::\n:::\n\n\n::: {#23e3ab76 .cell execution_count=7}\n``` {.python .cell-code}\ndata_n = data_n.astype(\"double\")\ndata_p = data_p.astype(\"double\")\n```\n:::\n\n\n::: {#f16df414 .cell execution_count=8}\n``` {.python .cell-code}\nmean_n_c = data_n.mean(axis=1)\nmean_p_c = data_p.agg(np.mean, axis=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\zhangyongtian\\AppData\\Local\\Temp\\ipykernel_31020\\3801786469.py:2: FutureWarning: The provided callable <function mean at 0x0000029C4EA2D260> is currently using DataFrame.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  mean_p_c = data_p.agg(np.mean, axis=1)\n```\n:::\n:::\n\n\n::: {#463382b5 .cell execution_count=9}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\")\nmean_p_c.plot(ax=ax, label=\"With punishment\")\nax.set_title(\"Average contributions to the public goods game\")\nax.set_ylabel(\"Average contribution\")\nax.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=1591 height=955}\n:::\n:::\n\n\n::: {#c86b4b6d .cell execution_count=10}\n``` {.python .cell-code}\npartial_names_list = [\"F. Kennedy\", \"Lennon\", \"Maynard Keynes\", \"Wayne\"]\n[\"John \" + name for name in partial_names_list]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n```\n:::\n:::\n\n\n::: {#b8f610c0 .cell execution_count=11}\n``` {.python .cell-code}\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n```\n:::\n:::\n\n\n::: {#02c4c944 .cell execution_count=12}\n``` {.python .cell-code}\n# Create new dataframe with bars in\ncompare_grps = pd.DataFrame(\n    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],\n    index=[\"Without punishment\", \"With punishment\"],\n)\n# Rename columns to have 'round' in them\ncompare_grps.columns = [\"Round \" + str(i) for i in compare_grps.columns]\n# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)\ncompare_grps = compare_grps.T\n# Make a bar chart\ncompare_grps.plot.bar(rot=0)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=1571 height=827}\n:::\n:::\n\n\n::: {#fd2480bb .cell execution_count=13}\n``` {.python .cell-code}\nn_c = data_n.agg([\"std\", \"var\", \"mean\"], 1)\nn_c\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>std</th>\n      <th>var</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>Period</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2.020724</td>\n      <td>4.083325</td>\n      <td>10.578313</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.238129</td>\n      <td>5.009220</td>\n      <td>10.628398</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.329569</td>\n      <td>5.426891</td>\n      <td>10.407079</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.068213</td>\n      <td>4.277504</td>\n      <td>9.813033</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2.108329</td>\n      <td>4.445049</td>\n      <td>9.305433</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2.240881</td>\n      <td>5.021549</td>\n      <td>8.454844</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2.136614</td>\n      <td>4.565117</td>\n      <td>7.837568</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2.349442</td>\n      <td>5.519880</td>\n      <td>7.376388</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2.413845</td>\n      <td>5.826645</td>\n      <td>6.392985</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2.187126</td>\n      <td>4.783520</td>\n      <td>4.383769</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0297f1d1 .cell execution_count=14}\n``` {.python .cell-code}\np_c = data_p.agg([\"std\", \"var\", \"mean\"], 1)\n```\n:::\n\n\n::: {#4d16458a .cell execution_count=15}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nn_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 standard deviations\n(n_c[\"mean\"] + 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 standard deviations\n(n_c[\"mean\"] - 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_n.columns)):\n    ax.scatter(x=data_n.index, y=data_n.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game without punishment\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=1675 height=955}\n:::\n:::\n\n\n::: {#464981d0 .cell execution_count=16}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\np_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 sd\n(p_c[\"mean\"] + 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 sd\n(p_c[\"mean\"] - 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_p.columns)):\n    ax.scatter(x=data_p.index, y=data_p.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game with punishment\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=1591 height=955}\n:::\n:::\n\n\n::: {#e57b752d .cell execution_count=17}\n``` {.python .cell-code}\ndata_p.apply(lambda x: x.max() - x.min(), axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nPeriod\n1     10.199675\n2     12.185065\n3     12.689935\n4     12.625000\n5     12.140375\n6     12.827541\n7     13.098931\n8     13.482621\n9     13.496754\n10    11.307360\ndtype: float64\n```\n:::\n:::\n\n\n::: {#e5a5ea20 .cell execution_count=18}\n``` {.python .cell-code}\n# A lambda function accepting three inputs, a, b, and c, and calculating the sum of the squares\ntest_function = lambda a, b, c: a**2 + b**2 + c**2\n\n\n# Now we apply the function by handing over (in parenthesis) the following inputs: a=3, b=4 and c=5\ntest_function(3, 4, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n50\n```\n:::\n:::\n\n\n::: {#58463493 .cell execution_count=19}\n``` {.python .cell-code}\nrange_function = lambda x: x.max() - x.min()\nrange_p = data_p.apply(range_function, axis=1)\nrange_n = data_n.apply(range_function, axis=1)\n```\n:::\n\n\n::: {#aa4a5988 .cell execution_count=20}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nrange_p.plot(ax=ax, label=\"With punishment\")\nrange_n.plot(ax=ax, label=\"Without punishment\")\nax.set_ylim(0, None)\nax.legend()\nax.set_title(\"Range of contributions to the public goods game\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=1571 height=955}\n:::\n:::\n\n\n::: {#90b4373e .cell execution_count=21}\n``` {.python .cell-code}\nfuncs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\nsumm_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"<lambda>\": \"range\"})\nsumm_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"<lambda>\": \"range\"})\nsumm_n.loc[[1, 10], :].round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>range</th>\n      <th>max</th>\n      <th>min</th>\n      <th>std</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>Period</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>6.14</td>\n      <td>14.10</td>\n      <td>7.96</td>\n      <td>2.02</td>\n      <td>10.58</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>7.38</td>\n      <td>8.68</td>\n      <td>1.30</td>\n      <td>2.19</td>\n      <td>4.38</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#5c1e022c .cell execution_count=22}\n``` {.python .cell-code}\nsumm_p.loc[[1, 10], :].round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>range</th>\n      <th>max</th>\n      <th>min</th>\n      <th>std</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>Period</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>10.20</td>\n      <td>16.02</td>\n      <td>5.82</td>\n      <td>3.21</td>\n      <td>10.64</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11.31</td>\n      <td>17.51</td>\n      <td>6.20</td>\n      <td>3.90</td>\n      <td>12.87</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#99e49e94 .cell execution_count=23}\n``` {.python .cell-code}\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T</th>\n      <th>dof</th>\n      <th>alternative</th>\n      <th>p-val</th>\n      <th>CI95%</th>\n      <th>cohen-d</th>\n      <th>BF10</th>\n      <th>power</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>T-test</th>\n      <td>-0.063782</td>\n      <td>30</td>\n      <td>two-sided</td>\n      <td>0.949567</td>\n      <td>[-2.0, 1.87]</td>\n      <td>0.02255</td>\n      <td>0.337</td>\n      <td>0.050437</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#5124c1ac .cell execution_count=24}\n``` {.python .cell-code}\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>T</th>\n      <th>dof</th>\n      <th>alternative</th>\n      <th>p-val</th>\n      <th>CI95%</th>\n      <th>cohen-d</th>\n      <th>BF10</th>\n      <th>power</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>T-test</th>\n      <td>-0.149959</td>\n      <td>15</td>\n      <td>two-sided</td>\n      <td>0.882795</td>\n      <td>[-0.92, 0.8]</td>\n      <td>0.02255</td>\n      <td>0.258</td>\n      <td>0.05082</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}