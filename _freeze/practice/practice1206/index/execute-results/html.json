{
  "hash": "ac88af8046767f8e973a8aeb61f9924a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Xuliqin Practice1206\"\noutput: \n  html_document:\n    toc: FALSE\n---\n\n::: {#7b11650e .cell execution_count=1}\n``` {.python .cell-code}\nfrom bs4 import BeautifulSoup\nimport re\nimport urllib.request, urllib.error  # for URL requests\nimport csv  # for saving as CSV\n\n\ndef main():\n    baseurl = \"https://movie.douban.com/top250?start=\"\n    datalist = getdata(baseurl)\n    savepath = \"./file/douban_top250.csv\"\n    savedata(datalist, savepath)\n\n\n# Regular expressions to extract information\nfindLink = re.compile(r'<a href=\"(.*?)\">')  # detail link\nfindImgSrc = re.compile(r'<img.*src=\"(.*?)\"', re.S)  # image link\nfindTitle = re.compile(r'<span class=\"title\">(.*)</span>')  # movie title\nfindRating = re.compile(\n    r'<span class=\"rating_num\" property=\"v:average\">(.*)</span>'\n)  # rating\nfindJudge = re.compile(r\"<span>(\\d*)人评价</span>\")  # number of reviews\nfindInq = re.compile(r'<span class=\"inq\">(.*)</span>')  # summary\nfindBd = re.compile(r'<p class=\"\">(.*?)</p>', re.S)  # additional info\n\n\n# Function to get data from the website\ndef getdata(baseurl):\n    datalist = []\n    for i in range(0, 10):\n        url = baseurl + str(i * 25)  # Go to the next page\n        html = geturl(url)\n        soup = BeautifulSoup(html, \"html.parser\")\n        for item in soup.find_all(\"div\", class_=\"item\"):  # Extract movie items\n            data = []  # Save movie data\n            item = str(item)  # Convert to string for regex\n            link = re.findall(findLink, item)[0]  # Detail link\n            data.append(link)\n\n            imgSrc = re.findall(findImgSrc, item)[0]  # Image link\n            data.append(imgSrc)\n\n            titles = re.findall(findTitle, item)  # Titles (CN and foreign)\n            if len(titles) == 2:\n                data.append(titles[0])  # Chinese title\n                data.append(titles[1].replace(\"/\", \"\").strip())  # Foreign title\n            else:\n                data.append(titles[0])  # Only Chinese title\n                data.append(\" \")  # Empty for foreign title\n\n            rating = re.findall(findRating, item)[0]  # Rating\n            data.append(rating)\n\n            judgeNum = re.findall(findJudge, item)[0]  # Number of reviews\n            data.append(judgeNum)\n\n            inq = re.findall(findInq, item)  # Summary\n            if len(inq) != 0:\n                data.append(inq[0].replace(\"。\", \"\"))\n            else:\n                data.append(\" \")\n\n            bd = re.findall(findBd, item)[0]  # Additional info\n            bd = re.sub(r\"<br(\\s+)?/>(\\s+)?\", \" \", bd)  # Replace line breaks\n            bd = re.sub(\"/\", \" \", bd)  # Replace slashes\n            data.append(bd.strip())\n\n            datalist.append(data)\n    return datalist\n\n\n# Function to save data to a CSV file\ndef savedata(datalist, savepath):\n    headers = [\n        \"电影详情链接\",\n        \"图片链接\",\n        \"影片中文名\",\n        \"影片外国名\",\n        \"评分\",\n        \"评价数\",\n        \"概况\",\n        \"相关信息\",\n    ]\n    with open(savepath, mode=\"w\", encoding=\"utf-8\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerow(headers)  # Write headers\n        for data in datalist:\n            writer.writerow(data)  # Write each movie's data\n\n\n# Function to get HTML content from a URL\ndef geturl(url):\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n        \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\"\n    }\n    req = urllib.request.Request(url, headers=head)\n    try:\n        response = urllib.request.urlopen(req)\n        html = response.read().decode(\"utf-8\")\n    except urllib.error.URLError as e:\n        if hasattr(e, \"code\"):\n            print(e.code)\n        if hasattr(e, \"reason\"):\n            print(e.reason)\n        return \"\"\n    return html\n\n\nif __name__ == \"__main__\":\n    main()\n    print(\"爬取成功并保存为CSV文件！\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n爬取成功并保存为CSV文件！\n```\n:::\n:::\n\n\n::: {#f98fe4d9 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\n\n# 设置中文字体\nmatplotlib.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体\nmatplotlib.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# Load datasets\ndouban_file_path = \"./file/douban_top250.csv\"\nimdb_file_path = \"./file/IMDB_Top250.csv\"\n\ndouban_data = pd.read_csv(douban_file_path, encoding=\"utf-8\", on_bad_lines=\"skip\")\nimdb_data = pd.read_csv(imdb_file_path, encoding=\"utf-8\", on_bad_lines=\"skip\")\n\n# Renaming columns for clarity and merging compatibility\ndouban_data.rename(\n    columns={\n        \"影片中文名\": \"Title\",\n        \"评分\": \"Douban_Score\",\n        \"评价数\": \"Douban_Reviews\",\n        \"相关信息\": \"Douban_Info\",\n    },\n    inplace=True,\n)\n\nimdb_data.rename(\n    columns={\n        \"Name\": \"Title\",\n        \"Year\": \"Release_Year\",\n        \"IMDB Ranking\": \"IMDB_Score\",\n        \"Genre\": \"IMDB_Genre\",\n        \"Director\": \"IMDB_Director\",\n    },\n    inplace=True,\n)\n\n# Calculate average scores for both platforms\ndouban_avg_score = douban_data[\"Douban_Score\"].mean()\nimdb_avg_score = imdb_data[\"IMDB_Score\"].mean()\n\n# Find overlapping movies by title\noverlap_movies = pd.merge(douban_data, imdb_data, on=\"Title\")\n\n# Visualize average scores\nplt.figure(figsize=(8, 5))\nplt.bar([\"Douban\", \"IMDb\"], [douban_avg_score, imdb_avg_score], alpha=0.7)\nplt.title(\"Average Scores: Douban vs IMDb\")\nplt.ylabel(\"Average Score\")\nplt.show()\n\n# Analyze release year distribution\nplt.figure(figsize=(10, 5))\ndouban_data[\"Douban_Info\"] = douban_data[\"Douban_Info\"].astype(str)\ndouban_years = douban_data[\"Douban_Info\"].str.extract(r\"(\\d{4})\").dropna()\n\n# 调试输出\nprint(\"Extracted years from Douban_Info:\")\nprint(douban_years.head())\n\n# 检查 douban_years 是否为空\nif not douban_years.empty:\n    try:\n        douban_years = douban_years[0].astype(int).value_counts().sort_index()\n    except KeyError:\n        print(\"KeyError: Column index 0 does not exist in douban_years\")\n        douban_years = pd.Series(dtype=int)\n    except ValueError:\n        print(\"ValueError: Cannot convert column to integer\")\n        douban_years = pd.Series(dtype=int)\nelse:\n    print(\"No years extracted from Douban_Info\")\n\n# 检查 imdb_years 是否为空\nimdb_years = imdb_data[\"Release_Year\"].value_counts().sort_index()\n\n# 绘制图表\nif not douban_years.empty and not imdb_years.empty:\n    douban_years.plot(kind=\"bar\", alpha=0.7, label=\"Douban\", figsize=(10, 5))\n    imdb_years.plot(kind=\"bar\", alpha=0.7, label=\"IMDb\", color=\"orange\")\n    plt.title(\"Release Year Distribution\")\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"Number of Movies\")\n    plt.legend()\n    plt.show()\nelse:\n    print(\"Cannot plot Release Year Distribution as one or both datasets are empty.\")\n\n# Analyze genre distribution\nimdb_genres = (\n    imdb_data[\"IMDB_Genre\"].str.split(\",\").explode().str.strip().value_counts()\n)\n\n# 检查 imdb_genres 是否为空\nif not imdb_genres.empty:\n    plt.figure(figsize=(10, 5))\n    imdb_genres.head(10).plot(kind=\"bar\", alpha=0.7, color=\"orange\")\n    plt.title(\"Top 10 IMDb Genres\")\n    plt.xlabel(\"Genre\")\n    plt.ylabel(\"Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 IMDb Genres as the dataset is empty.\")\n\n# Top directors by movie count\ndouban_directors = douban_data[\"Douban_Info\"].str.extract(r\"导演: (.+?) \").dropna()\ndouban_top_directors = douban_directors[0].value_counts().head(10)\n\nimdb_top_directors = imdb_data[\"IMDB_Director\"].value_counts().head(10)\n\n# 检查 douban_top_directors 是否为空\nif not douban_top_directors.empty:\n    plt.figure(figsize=(10, 5))\n    douban_top_directors.plot(kind=\"bar\", alpha=0.7, label=\"Douban\", color=\"blue\")\n    plt.title(\"Top 10 Douban Directors\")\n    plt.xlabel(\"Director\")\n    plt.ylabel(\"Movie Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 Douban Directors as the dataset is empty.\")\n\n# 检查 imdb_top_directors 是否为空\nif not imdb_top_directors.empty:\n    plt.figure(figsize=(10, 5))\n    imdb_top_directors.plot(kind=\"bar\", alpha=0.7, label=\"IMDb\", color=\"orange\")\n    plt.title(\"Top 10 IMDb Directors\")\n    plt.xlabel(\"Director\")\n    plt.ylabel(\"Movie Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 IMDb Directors as the dataset is empty.\")\n\n# Save overlapping movies to a CSV file\noverlap_movies.to_csv(\"./file/overlap_movies.csv\", index=False)\n\n# Print results\nprint(f\"豆瓣平均评分: {douban_avg_score}\")\nprint(f\"IMDb平均评分: {imdb_avg_score}\")\nprint(f\"重叠电影数量: {len(overlap_movies)}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=647 height=428}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nExtracted years from Douban_Info:\nEmpty DataFrame\nColumns: [0]\nIndex: []\nNo years extracted from Douban_Info\nCannot plot Release Year Distribution as one or both datasets are empty.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 960x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-4.png){width=816 height=607}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCannot plot Top 10 Douban Directors as the dataset is empty.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-6.png){width=796 height=547}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n豆瓣平均评分: nan\nIMDb平均评分: 8.254\n重叠电影数量: 0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}