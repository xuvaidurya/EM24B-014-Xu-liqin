[
  {
    "objectID": "labs/03_Visualization/Chipotle.html",
    "href": "labs/03_Visualization/Chipotle.html",
    "title": "03_Visualization -> Chipotle",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# set this so the graphs open internally\n%matplotlib inline\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called chipo.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n    \nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\n# get the Series of the names\nx = chipo.item_name\n\n# use the Counter class from collections to create a dictionary with keys(text) and frequency\nletter_counts = Counter(x)\n\n# convert the dictionary to a DataFrame\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\n# sort the values from the top to the least value and slice the first 5 items\ndf = df[0].sort_values(ascending = True)[45:50]\n\n# create the plot\ndf.plot(kind='bar')\n\n# Set the title and labels\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\n# show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\n# create a list of prices\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\n# then groupby the orders and sum\norders = chipo.groupby('order_id').sum()\n\n# creates the scatterplot\n# plt.scatter(orders.quantity, orders.item_price, s = 50, c = 'green')\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\n# Set the title and labels\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nQuestion:Create a bar chart of the last 5 items purchased\n\nitem_counts = chipo['item_name'].value_counts()\n\ndf = pd.DataFrame(item_counts).iloc[-5:] \n\ndf.reset_index(inplace=True)\ndf.columns = ['item_name', 'Number of Times Ordered']\n\ndf.plot(kind='bar', x='item_name', y='Number of Times Ordered', legend=False)\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Least Ordered Chipotle\\'s Items')\nplt.xticks(rotation=45)\nplt.tight_layout() \nplt.show()"
  },
  {
    "objectID": "practice/practice1206/index.html",
    "href": "practice/practice1206/index.html",
    "title": "Xuliqin Practice1206",
    "section": "",
    "text": "from bs4 import BeautifulSoup\nimport re\nimport urllib.request, urllib.error  # for URL requests\nimport csv  # for saving as CSV\n\n\ndef main():\n    baseurl = \"https://movie.douban.com/top250?start=\"\n    datalist = getdata(baseurl)\n    savepath = \"./file/douban_top250.csv\"\n    savedata(datalist, savepath)\n\n\n# Regular expressions to extract information\nfindLink = re.compile(r'&lt;a href=\"(.*?)\"&gt;')  # detail link\nfindImgSrc = re.compile(r'&lt;img.*src=\"(.*?)\"', re.S)  # image link\nfindTitle = re.compile(r'&lt;span class=\"title\"&gt;(.*)&lt;/span&gt;')  # movie title\nfindRating = re.compile(\n    r'&lt;span class=\"rating_num\" property=\"v:average\"&gt;(.*)&lt;/span&gt;'\n)  # rating\nfindJudge = re.compile(r\"&lt;span&gt;(\\d*)人评价&lt;/span&gt;\")  # number of reviews\nfindInq = re.compile(r'&lt;span class=\"inq\"&gt;(.*)&lt;/span&gt;')  # summary\nfindBd = re.compile(r'&lt;p class=\"\"&gt;(.*?)&lt;/p&gt;', re.S)  # additional info\n\n\n# Function to get data from the website\ndef getdata(baseurl):\n    datalist = []\n    for i in range(0, 10):\n        url = baseurl + str(i * 25)  # Go to the next page\n        html = geturl(url)\n        soup = BeautifulSoup(html, \"html.parser\")\n        for item in soup.find_all(\"div\", class_=\"item\"):  # Extract movie items\n            data = []  # Save movie data\n            item = str(item)  # Convert to string for regex\n            link = re.findall(findLink, item)[0]  # Detail link\n            data.append(link)\n\n            imgSrc = re.findall(findImgSrc, item)[0]  # Image link\n            data.append(imgSrc)\n\n            titles = re.findall(findTitle, item)  # Titles (CN and foreign)\n            if len(titles) == 2:\n                data.append(titles[0])  # Chinese title\n                data.append(titles[1].replace(\"/\", \"\").strip())  # Foreign title\n            else:\n                data.append(titles[0])  # Only Chinese title\n                data.append(\" \")  # Empty for foreign title\n\n            rating = re.findall(findRating, item)[0]  # Rating\n            data.append(rating)\n\n            judgeNum = re.findall(findJudge, item)[0]  # Number of reviews\n            data.append(judgeNum)\n\n            inq = re.findall(findInq, item)  # Summary\n            if len(inq) != 0:\n                data.append(inq[0].replace(\"。\", \"\"))\n            else:\n                data.append(\" \")\n\n            bd = re.findall(findBd, item)[0]  # Additional info\n            bd = re.sub(r\"&lt;br(\\s+)?/&gt;(\\s+)?\", \" \", bd)  # Replace line breaks\n            bd = re.sub(\"/\", \" \", bd)  # Replace slashes\n            data.append(bd.strip())\n\n            datalist.append(data)\n    return datalist\n\n\n# Function to save data to a CSV file\ndef savedata(datalist, savepath):\n    headers = [\n        \"电影详情链接\",\n        \"图片链接\",\n        \"影片中文名\",\n        \"影片外国名\",\n        \"评分\",\n        \"评价数\",\n        \"概况\",\n        \"相关信息\",\n    ]\n    with open(savepath, mode=\"w\", encoding=\"utf-8\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerow(headers)  # Write headers\n        for data in datalist:\n            writer.writerow(data)  # Write each movie's data\n\n\n# Function to get HTML content from a URL\ndef geturl(url):\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n        \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\"\n    }\n    req = urllib.request.Request(url, headers=head)\n    try:\n        response = urllib.request.urlopen(req)\n        html = response.read().decode(\"utf-8\")\n    except urllib.error.URLError as e:\n        if hasattr(e, \"code\"):\n            print(e.code)\n        if hasattr(e, \"reason\"):\n            print(e.reason)\n        return \"\"\n    return html\n\n\nif __name__ == \"__main__\":\n    main()\n    print(\"爬取成功并保存为CSV文件！\")\n\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n403\nForbidden\n爬取成功并保存为CSV文件！\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\n\n# 设置中文字体\nmatplotlib.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体\nmatplotlib.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# Load datasets\ndouban_file_path = \"./file/douban_top250.csv\"\nimdb_file_path = \"./file/IMDB_Top250.csv\"\n\ndouban_data = pd.read_csv(douban_file_path, encoding=\"utf-8\", on_bad_lines=\"skip\")\nimdb_data = pd.read_csv(imdb_file_path, encoding=\"utf-8\", on_bad_lines=\"skip\")\n\n# Renaming columns for clarity and merging compatibility\ndouban_data.rename(\n    columns={\n        \"影片中文名\": \"Title\",\n        \"评分\": \"Douban_Score\",\n        \"评价数\": \"Douban_Reviews\",\n        \"相关信息\": \"Douban_Info\",\n    },\n    inplace=True,\n)\n\nimdb_data.rename(\n    columns={\n        \"Name\": \"Title\",\n        \"Year\": \"Release_Year\",\n        \"IMDB Ranking\": \"IMDB_Score\",\n        \"Genre\": \"IMDB_Genre\",\n        \"Director\": \"IMDB_Director\",\n    },\n    inplace=True,\n)\n\n# Calculate average scores for both platforms\ndouban_avg_score = douban_data[\"Douban_Score\"].mean()\nimdb_avg_score = imdb_data[\"IMDB_Score\"].mean()\n\n# Find overlapping movies by title\noverlap_movies = pd.merge(douban_data, imdb_data, on=\"Title\")\n\n# Visualize average scores\nplt.figure(figsize=(8, 5))\nplt.bar([\"Douban\", \"IMDb\"], [douban_avg_score, imdb_avg_score], alpha=0.7)\nplt.title(\"Average Scores: Douban vs IMDb\")\nplt.ylabel(\"Average Score\")\nplt.show()\n\n# Analyze release year distribution\nplt.figure(figsize=(10, 5))\ndouban_data[\"Douban_Info\"] = douban_data[\"Douban_Info\"].astype(str)\ndouban_years = douban_data[\"Douban_Info\"].str.extract(r\"(\\d{4})\").dropna()\n\n# 调试输出\nprint(\"Extracted years from Douban_Info:\")\nprint(douban_years.head())\n\n# 检查 douban_years 是否为空\nif not douban_years.empty:\n    try:\n        douban_years = douban_years[0].astype(int).value_counts().sort_index()\n    except KeyError:\n        print(\"KeyError: Column index 0 does not exist in douban_years\")\n        douban_years = pd.Series(dtype=int)\n    except ValueError:\n        print(\"ValueError: Cannot convert column to integer\")\n        douban_years = pd.Series(dtype=int)\nelse:\n    print(\"No years extracted from Douban_Info\")\n\n# 检查 imdb_years 是否为空\nimdb_years = imdb_data[\"Release_Year\"].value_counts().sort_index()\n\n# 绘制图表\nif not douban_years.empty and not imdb_years.empty:\n    douban_years.plot(kind=\"bar\", alpha=0.7, label=\"Douban\", figsize=(10, 5))\n    imdb_years.plot(kind=\"bar\", alpha=0.7, label=\"IMDb\", color=\"orange\")\n    plt.title(\"Release Year Distribution\")\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"Number of Movies\")\n    plt.legend()\n    plt.show()\nelse:\n    print(\"Cannot plot Release Year Distribution as one or both datasets are empty.\")\n\n# Analyze genre distribution\nimdb_genres = (\n    imdb_data[\"IMDB_Genre\"].str.split(\",\").explode().str.strip().value_counts()\n)\n\n# 检查 imdb_genres 是否为空\nif not imdb_genres.empty:\n    plt.figure(figsize=(10, 5))\n    imdb_genres.head(10).plot(kind=\"bar\", alpha=0.7, color=\"orange\")\n    plt.title(\"Top 10 IMDb Genres\")\n    plt.xlabel(\"Genre\")\n    plt.ylabel(\"Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 IMDb Genres as the dataset is empty.\")\n\n# Top directors by movie count\ndouban_directors = douban_data[\"Douban_Info\"].str.extract(r\"导演: (.+?) \").dropna()\ndouban_top_directors = douban_directors[0].value_counts().head(10)\n\nimdb_top_directors = imdb_data[\"IMDB_Director\"].value_counts().head(10)\n\n# 检查 douban_top_directors 是否为空\nif not douban_top_directors.empty:\n    plt.figure(figsize=(10, 5))\n    douban_top_directors.plot(kind=\"bar\", alpha=0.7, label=\"Douban\", color=\"blue\")\n    plt.title(\"Top 10 Douban Directors\")\n    plt.xlabel(\"Director\")\n    plt.ylabel(\"Movie Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 Douban Directors as the dataset is empty.\")\n\n# 检查 imdb_top_directors 是否为空\nif not imdb_top_directors.empty:\n    plt.figure(figsize=(10, 5))\n    imdb_top_directors.plot(kind=\"bar\", alpha=0.7, label=\"IMDb\", color=\"orange\")\n    plt.title(\"Top 10 IMDb Directors\")\n    plt.xlabel(\"Director\")\n    plt.ylabel(\"Movie Count\")\n    plt.show()\nelse:\n    print(\"Cannot plot Top 10 IMDb Directors as the dataset is empty.\")\n\n# Save overlapping movies to a CSV file\noverlap_movies.to_csv(\"./file/overlap_movies.csv\", index=False)\n\n# Print results\nprint(f\"豆瓣平均评分: {douban_avg_score}\")\nprint(f\"IMDb平均评分: {imdb_avg_score}\")\nprint(f\"重叠电影数量: {len(overlap_movies)}\")\n\n\n\n\n\n\n\n\nExtracted years from Douban_Info:\nEmpty DataFrame\nColumns: [0]\nIndex: []\nNo years extracted from Douban_Info\nCannot plot Release Year Distribution as one or both datasets are empty.\n\n\n&lt;Figure size 960x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nCannot plot Top 10 Douban Directors as the dataset is empty.\n\n\n\n\n\n\n\n\n\n豆瓣平均评分: nan\nIMDb平均评分: 8.254\n重叠电影数量: 0"
  },
  {
    "objectID": "practice/practice1127/practice1127-3.html",
    "href": "practice/practice1127/practice1127-3.html",
    "title": "Xuliqin Practice1127-3",
    "section": "",
    "text": "%pip install requests beautifulsoup4\n\nRequirement already satisfied: requests in d:\\program files\\python3.12.7\\lib\\site-packages (2.32.3)\nRequirement already satisfied: beautifulsoup4 in d:\\program files\\python3.12.7\\lib\\site-packages (4.12.3)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in d:\\program files\\python3.12.7\\lib\\site-packages (from requests) (3.4.0)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in d:\\program files\\python3.12.7\\lib\\site-packages (from requests) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in d:\\program files\\python3.12.7\\lib\\site-packages (from requests) (2.2.3)\nRequirement already satisfied: certifi&gt;=2017.4.17 in d:\\program files\\python3.12.7\\lib\\site-packages (from requests) (2024.8.30)\nRequirement already satisfied: soupsieve&gt;1.2 in d:\\program files\\python3.12.7\\lib\\site-packages (from beautifulsoup4) (2.6)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n[notice] A new release of pip is available: 24.2 -&gt; 24.3.1\n[notice] To update, run: pythonw.exe -m pip install --upgrade pip\n\n\n\nimport requests\n \n# 定义请求的 URL 和 headers\nurl = \"https://movie.douban.com/top250\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n}\n \n# 发送 GET 请求\nresponse = requests.get(url, headers=headers)\nresponse.encoding = 'utf-8'  # 设置编码方式\nhtml_content = response.text  # 获取网页的 HTML 内容\nprint(\"网页内容加载成功！\")\n\n网页内容加载成功！\n\n\n\nfrom bs4 import BeautifulSoup\n \n# 使用 Beautiful Soup 解析 HTML\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# 提取电影名称、描述、评分和评价人数\nmovies = []\nfor item in soup.find_all('div', class_='item'):\n    title = item.find('span', class_='title').get_text()  # 电影名称\n    description = item.find('span', class_='inq')  # 电影描述\n    rating = item.find('span', class_='rating_num').get_text()  # 评分\n    votes = item.find('div', class_='star').find_all('span')[3].get_text()  # 评价人数\n    \n    # 如果没有描述，将其置为空字符串\n    if description:\n        description = description.get_text()\n    else:\n        description = ''\n    \n    movie = {\n        \"title\": title,\n        \"description\": description,\n        \"rating\": rating,\n        \"votes\": votes.replace('人评价', '').strip()\n    }\n    movies.append(movie)\n \nprint(\"数据提取成功！\")\n\n数据提取成功！\n\n\n\nimport csv\n \n# 将数据保存到 CSV 文件\nwith open('./file/douban_top250.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    fieldnames = ['title', 'description', 'rating', 'votes']\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n \n    writer.writeheader()  # 写入表头\n    for movie in movies:\n        writer.writerow(movie)  # 写入每一行数据\n \nprint(\"数据已成功保存到 douban_top250.csv\")\n\n数据已成功保存到 douban_top250.csv\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\n \n# 定义请求的 URL 和 headers\nurl = \"https://movie.douban.com/top250\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n}\n \n# 发送 GET 请求\nresponse = requests.get(url, headers=headers)\nresponse.encoding = 'utf-8'  # 设置编码方式\nhtml_content = response.text  # 获取网页的 HTML 内容\n \n# 使用 Beautiful Soup 解析 HTML\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# 提取电影名称、描述、评分和评价人数\nmovies = []\nfor item in soup.find_all('div', class_='item'):\n    title = item.find('span', class_='title').get_text()  # 电影名称\n    description = item.find('span', class_='inq')  # 电影描述\n    rating = item.find('span', class_='rating_num').get_text()  # 评分\n    votes = item.find('div', class_='star').find_all('span')[3].get_text()  # 评价人数\n    \n    # 如果没有描述，将其置为空字符串\n    if description:\n        description = description.get_text()\n    else:\n        description = ''\n    \n    movie = {\n        \"title\": title,\n        \"description\": description,\n        \"rating\": rating,\n        \"votes\": votes.replace('人评价', '').strip()\n    }\n    movies.append(movie)\n \n# 将数据保存到 CSV 文件\nwith open('./file/douban_top250.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    fieldnames = ['title', 'description', 'rating', 'votes']\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n \n    writer.writeheader()  # 写入表头\n    for movie in movies:\n        writer.writerow(movie)  # 写入每一行数据\n \nprint(\"数据已成功保存到 douban_top250.csv\")\n\n数据已成功保存到 douban_top250.csv"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Xuliqin’s Quarto Website",
    "section": "",
    "text": "Welcome to my website and data analysis portfolio.\n\nThis is my website and homework presentation\nPlease use the Menu Bar above to look around."
  },
  {
    "objectID": "index.html#hello-welcome-to-visit-my-quarto-website",
    "href": "index.html#hello-welcome-to-visit-my-quarto-website",
    "title": "Xuliqin’s Quarto Website",
    "section": "",
    "text": "Welcome to my website and data analysis portfolio.\n\nThis is my website and homework presentation\nPlease use the Menu Bar above to look around."
  },
  {
    "objectID": "homework/homework2.html",
    "href": "homework/homework2.html",
    "title": "Xuliqin homework for lecture 2-pet names",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv('./file/seattle_pet_licenses.csv')\ndf\n\n\n\n\n\n\n\n\nanimal_s_name\nlicense_issue_date\nlicense_number\nprimary_breed\nsecondary_breed\nspecies\nzip_code\n\n\n\n\n0\nOzzy\n2005-03-29T00:00:00.000\n130651.0\nDachshund, Standard Smooth Haired\nNaN\nDog\n98104\n\n\n1\nJack\n2009-12-23T00:00:00.000\n898148.0\nSchnauzer, Miniature\nTerrier, Rat\nDog\n98107\n\n\n2\nGinger\n2006-01-20T00:00:00.000\n29654.0\nRetriever, Golden\nRetriever, Labrador\nDog\n98117\n\n\n3\nPepper\n2006-02-07T00:00:00.000\n75432.0\nManx\nMix\nCat\n98103\n\n\n4\nAddy\n2006-08-04T00:00:00.000\n729899.0\nRetriever, Golden\nNaN\nDog\n98105\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n66037\nLily\n2016-12-27T00:00:00.000\nNaN\nDomestic Shorthair\nMix\nCat\n98117\n\n\n66038\nEllie\n2016-11-29T00:00:00.000\nNaN\nGerman Shepherd\nMix\nDog\n98105\n\n\n66039\nSammy\n2016-12-05T00:00:00.000\nNaN\nTerrier\nMaltese\nDog\n98105\n\n\n66040\nBuddy\n2016-12-06T00:00:00.000\nNaN\nBullmastiff\nMix\nDog\n98105\n\n\n66041\nAku\n2016-12-07T00:00:00.000\nNaN\nChihuahua, Short Coat\nTerrier\nDog\n98106\n\n\n\n\n66042 rows × 7 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 66042 entries, 0 to 66041\nData columns (total 7 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   animal_s_name       64685 non-null  object \n 1   license_issue_date  66042 non-null  object \n 2   license_number      43885 non-null  float64\n 3   primary_breed       66042 non-null  object \n 4   secondary_breed     22538 non-null  object \n 5   species             66042 non-null  object \n 6   zip_code            65884 non-null  object \ndtypes: float64(1), object(6)\nmemory usage: 3.5+ MB\n\n\n\ndf['animal_s_name'].value_counts()\n\nanimal_s_name\nLucy          566\nBella         451\nCharlie       447\nMax           374\nLuna          361\n             ... \nManasseh        1\nTaba            1\nMiriam          1\nNumber Six      1\nRollins         1\nName: count, Length: 15795, dtype: int64"
  },
  {
    "objectID": "homework/homework3-1.html",
    "href": "homework/homework3-1.html",
    "title": "Xuliqin The homework3.1",
    "section": "",
    "text": "import pandas as pd\nurl ='https://raw.githubusercontent.com/tidyverse/datascience-box/refs/heads/main/course-materials/lab-instructions/lab-03/data/nobel.csv'\ndf = pd.read_csv(url)\nprint(df.head())\n\n   id       firstname    surname  year category  \\\n0   1  Wilhelm Conrad    Röntgen  1901  Physics   \n1   2      Hendrik A.    Lorentz  1902  Physics   \n2   3          Pieter     Zeeman  1902  Physics   \n3   4           Henri  Becquerel  1903  Physics   \n4   5          Pierre      Curie  1903  Physics   \n\n                                         affiliation       city      country  \\\n0                                  Munich University     Munich      Germany   \n1                                  Leiden University     Leiden  Netherlands   \n2                               Amsterdam University  Amsterdam  Netherlands   \n3                                École Polytechnique      Paris       France   \n4  École municipale de physique et de chimie indu...      Paris       France   \n\n    born_date   died_date  ... died_country_code overall_motivation share  \\\n0  1845-03-27  1923-02-10  ...                DE                NaN     1   \n1  1853-07-18  1928-02-04  ...                NL                NaN     2   \n2  1865-05-25  1943-10-09  ...                NL                NaN     2   \n3  1852-12-15  1908-08-25  ...                FR                NaN     2   \n4  1859-05-15  1906-04-19  ...                FR                NaN     4   \n\n                                          motivation  born_country_original  \\\n0  \"in recognition of the extraordinary services ...  Prussia (now Germany)   \n1  \"in recognition of the extraordinary service t...        the Netherlands   \n2  \"in recognition of the extraordinary service t...        the Netherlands   \n3  \"in recognition of the extraordinary services ...                 France   \n4  \"in recognition of the extraordinary services ...                 France   \n\n       born_city_original died_country_original died_city_original  \\\n0  Lennep (now Remscheid)               Germany             Munich   \n1                  Arnhem       the Netherlands                NaN   \n2              Zonnemaire       the Netherlands          Amsterdam   \n3                   Paris                France                NaN   \n4                   Paris                France              Paris   \n\n   city_original country_original  \n0         Munich          Germany  \n1         Leiden  the Netherlands  \n2      Amsterdam  the Netherlands  \n3          Paris           France  \n4          Paris           France  \n\n[5 rows x 26 columns]\n\n\n\ndf\n\n\n\n\n\n\n\n\nid\nfirstname\nsurname\nyear\ncategory\naffiliation\ncity\ncountry\nborn_date\ndied_date\n...\ndied_country_code\noverall_motivation\nshare\nmotivation\nborn_country_original\nborn_city_original\ndied_country_original\ndied_city_original\ncity_original\ncountry_original\n\n\n\n\n0\n1\nWilhelm Conrad\nRöntgen\n1901\nPhysics\nMunich University\nMunich\nGermany\n1845-03-27\n1923-02-10\n...\nDE\nNaN\n1\n\"in recognition of the extraordinary services ...\nPrussia (now Germany)\nLennep (now Remscheid)\nGermany\nMunich\nMunich\nGermany\n\n\n1\n2\nHendrik A.\nLorentz\n1902\nPhysics\nLeiden University\nLeiden\nNetherlands\n1853-07-18\n1928-02-04\n...\nNL\nNaN\n2\n\"in recognition of the extraordinary service t...\nthe Netherlands\nArnhem\nthe Netherlands\nNaN\nLeiden\nthe Netherlands\n\n\n2\n3\nPieter\nZeeman\n1902\nPhysics\nAmsterdam University\nAmsterdam\nNetherlands\n1865-05-25\n1943-10-09\n...\nNL\nNaN\n2\n\"in recognition of the extraordinary service t...\nthe Netherlands\nZonnemaire\nthe Netherlands\nAmsterdam\nAmsterdam\nthe Netherlands\n\n\n3\n4\nHenri\nBecquerel\n1903\nPhysics\nÉcole Polytechnique\nParis\nFrance\n1852-12-15\n1908-08-25\n...\nFR\nNaN\n2\n\"in recognition of the extraordinary services ...\nFrance\nParis\nFrance\nNaN\nParis\nFrance\n\n\n4\n5\nPierre\nCurie\n1903\nPhysics\nÉcole municipale de physique et de chimie indu...\nParis\nFrance\n1859-05-15\n1906-04-19\n...\nFR\nNaN\n4\n\"in recognition of the extraordinary services ...\nFrance\nParis\nFrance\nParis\nParis\nFrance\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n930\n965\nSir Gregory P.\nWinter\n2018\nChemistry\nMRC Laboratory of Molecular Biology\nCambridge\nUnited Kingdom\n1951-04-14\nNaN\n...\nNaN\nNaN\n4\n\"for the phage display of peptides and antibod...\nUnited Kingdom\nLeicester\nNaN\nNaN\nCambridge\nUnited Kingdom\n\n\n931\n966\nDenis\nMukwege\n2018\nPeace\nNaN\nNaN\nNaN\n1955-03-01\nNaN\n...\nNaN\nNaN\n2\n\"for their efforts to end the use of sexual vi...\nBelgian Congo (now Democratic Republic of the ...\nBukavu\nNaN\nNaN\nNaN\nNaN\n\n\n932\n967\nNadia\nMurad\n2018\nPeace\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\n2\n\"for their efforts to end the use of sexual vi...\nIraq\nKojo\nNaN\nNaN\nNaN\nNaN\n\n\n933\n968\nWilliam D.\nNordhaus\n2018\nEconomics\nYale University\nNew Haven CT\nUSA\n1941-05-31\nNaN\n...\nNaN\nNaN\n2\n\"for integrating climate change into long-run ...\nUSA\nAlbuquerque NM\nNaN\nNaN\nNew Haven CT\nUSA\n\n\n934\n969\nPaul M.\nRomer\n2018\nEconomics\nNYU Stern School of Business\nNew York NY\nUSA\nNaN\nNaN\n...\nNaN\nNaN\n2\n\"for integrating technological innovations int...\nUSA\nDenver CO\nNaN\nNaN\nNew York NY\nUSA\n\n\n\n\n935 rows × 26 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 935 entries, 0 to 934\nData columns (total 26 columns):\n #   Column                 Non-Null Count  Dtype \n---  ------                 --------------  ----- \n 0   id                     935 non-null    int64 \n 1   firstname              935 non-null    object\n 2   surname                906 non-null    object\n 3   year                   935 non-null    int64 \n 4   category               935 non-null    object\n 5   affiliation            685 non-null    object\n 6   city                   680 non-null    object\n 7   country                681 non-null    object\n 8   born_date              902 non-null    object\n 9   died_date              627 non-null    object\n 10  gender                 935 non-null    object\n 11  born_city              907 non-null    object\n 12  born_country           907 non-null    object\n 13  born_country_code      907 non-null    object\n 14  died_city              608 non-null    object\n 15  died_country           614 non-null    object\n 16  died_country_code      614 non-null    object\n 17  overall_motivation     17 non-null     object\n 18  share                  935 non-null    int64 \n 19  motivation             935 non-null    object\n 20  born_country_original  907 non-null    object\n 21  born_city_original     907 non-null    object\n 22  died_country_original  614 non-null    object\n 23  died_city_original     608 non-null    object\n 24  city_original          680 non-null    object\n 25  country_original       681 non-null    object\ndtypes: int64(3), object(23)\nmemory usage: 190.1+ KB\n\n\n\ndf[(df['country'].notna())]\n\n\n\n\n\n\n\n\nid\nfirstname\nsurname\nyear\ncategory\naffiliation\ncity\ncountry\nborn_date\ndied_date\n...\ndied_country_code\noverall_motivation\nshare\nmotivation\nborn_country_original\nborn_city_original\ndied_country_original\ndied_city_original\ncity_original\ncountry_original\n\n\n\n\n0\n1\nWilhelm Conrad\nRöntgen\n1901\nPhysics\nMunich University\nMunich\nGermany\n1845-03-27\n1923-02-10\n...\nDE\nNaN\n1\n\"in recognition of the extraordinary services ...\nPrussia (now Germany)\nLennep (now Remscheid)\nGermany\nMunich\nMunich\nGermany\n\n\n1\n2\nHendrik A.\nLorentz\n1902\nPhysics\nLeiden University\nLeiden\nNetherlands\n1853-07-18\n1928-02-04\n...\nNL\nNaN\n2\n\"in recognition of the extraordinary service t...\nthe Netherlands\nArnhem\nthe Netherlands\nNaN\nLeiden\nthe Netherlands\n\n\n2\n3\nPieter\nZeeman\n1902\nPhysics\nAmsterdam University\nAmsterdam\nNetherlands\n1865-05-25\n1943-10-09\n...\nNL\nNaN\n2\n\"in recognition of the extraordinary service t...\nthe Netherlands\nZonnemaire\nthe Netherlands\nAmsterdam\nAmsterdam\nthe Netherlands\n\n\n3\n4\nHenri\nBecquerel\n1903\nPhysics\nÉcole Polytechnique\nParis\nFrance\n1852-12-15\n1908-08-25\n...\nFR\nNaN\n2\n\"in recognition of the extraordinary services ...\nFrance\nParis\nFrance\nNaN\nParis\nFrance\n\n\n4\n5\nPierre\nCurie\n1903\nPhysics\nÉcole municipale de physique et de chimie indu...\nParis\nFrance\n1859-05-15\n1906-04-19\n...\nFR\nNaN\n4\n\"in recognition of the extraordinary services ...\nFrance\nParis\nFrance\nParis\nParis\nFrance\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n928\n963\nFrances H.\nArnold\n2018\nChemistry\nCalifornia Institute of Technology (Caltech)\nPasadena CA\nUSA\n1956-07-25\nNaN\n...\nNaN\nNaN\n2\n\"for the directed evolution of enzymes\"\nUSA\nPittsburgh PA\nNaN\nNaN\nPasadena CA\nUSA\n\n\n929\n964\nGeorge P.\nSmith\n2018\nChemistry\nUniversity of Missouri\nColumbia\nUSA\n1941-03-10\nNaN\n...\nNaN\nNaN\n4\n\"for the phage display of peptides and antibod...\nUSA\nNorwalk CT\nNaN\nNaN\nColumbia\nUSA\n\n\n930\n965\nSir Gregory P.\nWinter\n2018\nChemistry\nMRC Laboratory of Molecular Biology\nCambridge\nUnited Kingdom\n1951-04-14\nNaN\n...\nNaN\nNaN\n4\n\"for the phage display of peptides and antibod...\nUnited Kingdom\nLeicester\nNaN\nNaN\nCambridge\nUnited Kingdom\n\n\n933\n968\nWilliam D.\nNordhaus\n2018\nEconomics\nYale University\nNew Haven CT\nUSA\n1941-05-31\nNaN\n...\nNaN\nNaN\n2\n\"for integrating climate change into long-run ...\nUSA\nAlbuquerque NM\nNaN\nNaN\nNew Haven CT\nUSA\n\n\n934\n969\nPaul M.\nRomer\n2018\nEconomics\nNYU Stern School of Business\nNew York NY\nUSA\nNaN\nNaN\n...\nNaN\nNaN\n2\n\"for integrating technological innovations int...\nUSA\nDenver CO\nNaN\nNaN\nNew York NY\nUSA\n\n\n\n\n681 rows × 26 columns\n\n\n\n\ndf[(df['died_date'].isna())]\n\n\n\n\n\n\n\n\nid\nfirstname\nsurname\nyear\ncategory\naffiliation\ncity\ncountry\nborn_date\ndied_date\n...\ndied_country_code\noverall_motivation\nshare\nmotivation\nborn_country_original\nborn_city_original\ndied_country_original\ndied_city_original\ncity_original\ncountry_original\n\n\n\n\n68\n68\nChen Ning\nYang\n1957\nPhysics\nInstitute for Advanced Study\nPrinceton NJ\nUSA\n1922-09-22\nNaN\n...\nNaN\nNaN\n2\n\"for their penetrating investigation of the so...\nChina\nHofei Anhwei\nNaN\nNaN\nPrinceton NJ\nUSA\n\n\n69\n69\nTsung-Dao\nLee\n1957\nPhysics\nColumbia University\nNew York NY\nUSA\n1926-11-24\nNaN\n...\nNaN\nNaN\n2\n\"for their penetrating investigation of the so...\nChina\nShanghai\nNaN\nNaN\nNew York NY\nUSA\n\n\n94\n95\nLeon N.\nCooper\n1972\nPhysics\nBrown University\nProvidence RI\nUSA\n1930-02-28\nNaN\n...\nNaN\nNaN\n3\n\"for their jointly developed theory of superco...\nUSA\nNew York NY\nNaN\nNaN\nProvidence RI\nUSA\n\n\n96\n97\nLeo\nEsaki\n1973\nPhysics\nIBM Thomas J. Watson Research Center\nYorktown Heights NY\nUSA\n1925-03-12\nNaN\n...\nNaN\nNaN\n4\n\"for their experimental discoveries regarding ...\nJapan\nOsaka\nNaN\nNaN\nYorktown Heights NY\nUSA\n\n\n97\n98\nIvar\nGiaever\n1973\nPhysics\nGeneral Electric Company\nSchenectady NY\nUSA\n1929-04-05\nNaN\n...\nNaN\nNaN\n4\n\"for their experimental discoveries regarding ...\nNorway\nBergen\nNaN\nNaN\nSchenectady NY\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n930\n965\nSir Gregory P.\nWinter\n2018\nChemistry\nMRC Laboratory of Molecular Biology\nCambridge\nUnited Kingdom\n1951-04-14\nNaN\n...\nNaN\nNaN\n4\n\"for the phage display of peptides and antibod...\nUnited Kingdom\nLeicester\nNaN\nNaN\nCambridge\nUnited Kingdom\n\n\n931\n966\nDenis\nMukwege\n2018\nPeace\nNaN\nNaN\nNaN\n1955-03-01\nNaN\n...\nNaN\nNaN\n2\n\"for their efforts to end the use of sexual vi...\nBelgian Congo (now Democratic Republic of the ...\nBukavu\nNaN\nNaN\nNaN\nNaN\n\n\n932\n967\nNadia\nMurad\n2018\nPeace\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\n2\n\"for their efforts to end the use of sexual vi...\nIraq\nKojo\nNaN\nNaN\nNaN\nNaN\n\n\n933\n968\nWilliam D.\nNordhaus\n2018\nEconomics\nYale University\nNew Haven CT\nUSA\n1941-05-31\nNaN\n...\nNaN\nNaN\n2\n\"for integrating climate change into long-run ...\nUSA\nAlbuquerque NM\nNaN\nNaN\nNew Haven CT\nUSA\n\n\n934\n969\nPaul M.\nRomer\n2018\nEconomics\nNYU Stern School of Business\nNew York NY\nUSA\nNaN\nNaN\n...\nNaN\nNaN\n2\n\"for integrating technological innovations int...\nUSA\nDenver CO\nNaN\nNaN\nNew York NY\nUSA\n\n\n\n\n308 rows × 26 columns"
  },
  {
    "objectID": "homework/homework3-2.html",
    "href": "homework/homework3-2.html",
    "title": "Xuliqin The homework3.2",
    "section": "",
    "text": "import pandas as pd\nurl ='https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'\ndf = pd.read_csv(url)\nprint(df.head())\n\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n\n\n\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n888\n889\n0\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\n\n\n\n\n891 rows × 12 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n\n\n\nfrom skimpy import clean_columns\ndf = clean_columns(df,case=\"snake\")\nprint(df.columns)\n\nIndex(['passenger_id', 'survived', 'pclass', 'name', 'sex', 'age', 'sib_sp',\n       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n      dtype='object')\n\n\n\ndf.fillna(\"-\")\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\npclass\nname\nsex\nage\nsib_sp\nparch\nticket\nfare\ncabin\nembarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\n-\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\n-\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\n-\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\n-\nS\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n888\n889\n0\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\n-\n1\n2\nW./C. 6607\n23.4500\n-\nS\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\n-\nQ\n\n\n\n\n891 rows × 12 columns\n\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\npclass\nage\nsib_sp\nparch\nfare\n\n\n\n\ncount\n891.000000\n891.000000\n891.000000\n714.000000\n891.000000\n891.000000\n891.000000\n\n\nmean\n446.000000\n0.383838\n2.308642\n29.699118\n0.523008\n0.381594\n32.204208\n\n\nstd\n257.353842\n0.486592\n0.836071\n14.526497\n1.102743\n0.806057\n49.693429\n\n\nmin\n1.000000\n0.000000\n1.000000\n0.420000\n0.000000\n0.000000\n0.000000\n\n\n25%\n223.500000\n0.000000\n2.000000\n20.125000\n0.000000\n0.000000\n7.910400\n\n\n50%\n446.000000\n0.000000\n3.000000\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n75%\n668.500000\n1.000000\n3.000000\n38.000000\n1.000000\n0.000000\n31.000000\n\n\nmax\n891.000000\n1.000000\n3.000000\n80.000000\n8.000000\n6.000000\n512.329200\n\n\n\n\n\n\n\n\nsum_table = df.describe().round(2)\nsum_table\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\npclass\nage\nsib_sp\nparch\nfare\n\n\n\n\ncount\n891.00\n891.00\n891.00\n714.00\n891.00\n891.00\n891.00\n\n\nmean\n446.00\n0.38\n2.31\n29.70\n0.52\n0.38\n32.20\n\n\nstd\n257.35\n0.49\n0.84\n14.53\n1.10\n0.81\n49.69\n\n\nmin\n1.00\n0.00\n1.00\n0.42\n0.00\n0.00\n0.00\n\n\n25%\n223.50\n0.00\n2.00\n20.12\n0.00\n0.00\n7.91\n\n\n50%\n446.00\n0.00\n3.00\n28.00\n0.00\n0.00\n14.45\n\n\n75%\n668.50\n1.00\n3.00\n38.00\n1.00\n0.00\n31.00\n\n\nmax\n891.00\n1.00\n3.00\n80.00\n8.00\n6.00\n512.33\n\n\n\n\n\n\n\n\ndf.dropna()\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\npclass\nname\nsex\nage\nsib_sp\nparch\nticket\nfare\ncabin\nembarked\n\n\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n6\n7\n0\n1\nMcCarthy, Mr. Timothy J\nmale\n54.0\n0\n0\n17463\n51.8625\nE46\nS\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n11\n12\n1\n1\nBonnell, Miss. Elizabeth\nfemale\n58.0\n0\n0\n113783\n26.5500\nC103\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n871\n872\n1\n1\nBeckwith, Mrs. Richard Leonard (Sallie Monypeny)\nfemale\n47.0\n1\n1\n11751\n52.5542\nD35\nS\n\n\n872\n873\n0\n1\nCarlsson, Mr. Frans Olof\nmale\n33.0\n0\n0\n695\n5.0000\nB51 B53 B55\nS\n\n\n879\n880\n1\n1\nPotter, Mrs. Thomas Jr (Lily Alexenia Wilson)\nfemale\n56.0\n0\n1\n11767\n83.1583\nC50\nC\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n\n\n183 rows × 12 columns"
  },
  {
    "objectID": "homework/homework4.html",
    "href": "homework/homework4.html",
    "title": "Xuliqin The homework4",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv('./file/all-ages.csv')\ndf\n\n\n\n\n\n\n\n\nMajor_code\nMajor\nMajor_category\nTotal\nEmployed\nEmployed_full_time_year_round\nUnemployed\nUnemployment_rate\nMedian\nP25th\nP75th\n\n\n\n\n0\n1100\nGENERAL AGRICULTURE\nAgriculture & Natural Resources\n128148\n90245\n74078\n2423\n0.026147\n50000\n34000\n80000.0\n\n\n1\n1101\nAGRICULTURE PRODUCTION AND MANAGEMENT\nAgriculture & Natural Resources\n95326\n76865\n64240\n2266\n0.028636\n54000\n36000\n80000.0\n\n\n2\n1102\nAGRICULTURAL ECONOMICS\nAgriculture & Natural Resources\n33955\n26321\n22810\n821\n0.030248\n63000\n40000\n98000.0\n\n\n3\n1103\nANIMAL SCIENCES\nAgriculture & Natural Resources\n103549\n81177\n64937\n3619\n0.042679\n46000\n30000\n72000.0\n\n\n4\n1104\nFOOD SCIENCE\nAgriculture & Natural Resources\n24280\n17281\n12722\n894\n0.049188\n62000\n38500\n90000.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n168\n6211\nHOSPITALITY MANAGEMENT\nBusiness\n200854\n163393\n122499\n8862\n0.051447\n49000\n33000\n70000.0\n\n\n169\n6212\nMANAGEMENT INFORMATION SYSTEMS AND STATISTICS\nBusiness\n156673\n134478\n118249\n6186\n0.043977\n72000\n50000\n100000.0\n\n\n170\n6299\nMISCELLANEOUS BUSINESS & MEDICAL ADMINISTRATION\nBusiness\n102753\n77471\n61603\n4308\n0.052679\n53000\n36000\n83000.0\n\n\n171\n6402\nHISTORY\nHumanities & Liberal Arts\n712509\n478416\n354163\n33725\n0.065851\n50000\n35000\n80000.0\n\n\n172\n6403\nUNITED STATES HISTORY\nHumanities & Liberal Arts\n17746\n11887\n8204\n943\n0.073500\n50000\n39000\n81000.0\n\n\n\n\n173 rows × 11 columns\n\n\n\n\n# 按照专业分组，并把失业率从低到高升序排列\nresult = df.groupby([\"Major\"]).sum().sort_values([\"Unemployment_rate\"])\nprint(result)\n\n                                            Major_code  \\\nMajor                                                    \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING            2411   \nEDUCATIONAL ADMINISTRATION AND SUPERVISION        2301   \nPHARMACOLOGY                                      3607   \nMATERIALS SCIENCE                                 5008   \nMATHEMATICS AND COMPUTER SCIENCE                  4005   \n...                                                ...   \nLIBRARY SCIENCE                                   3501   \nSCHOOL STUDENT COUNSELING                         2303   \nMILITARY TECHNOLOGIES                             3801   \nCLINICAL PSYCHOLOGY                               5202   \nMISCELLANEOUS FINE ARTS                           6099   \n\n                                                                 Major_category  \\\nMajor                                                                             \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING                              Engineering   \nEDUCATIONAL ADMINISTRATION AND SUPERVISION                            Education   \nPHARMACOLOGY                                             Biology & Life Science   \nMATERIALS SCIENCE                                                   Engineering   \nMATHEMATICS AND COMPUTER SCIENCE                        Computers & Mathematics   \n...                                                                         ...   \nLIBRARY SCIENCE                                                       Education   \nSCHOOL STUDENT COUNSELING                                             Education   \nMILITARY TECHNOLOGIES                       Industrial Arts & Consumer Services   \nCLINICAL PSYCHOLOGY                                    Psychology & Social Work   \nMISCELLANEOUS FINE ARTS                                                    Arts   \n\n                                            Total  Employed  \\\nMajor                                                         \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING       6264      4120   \nEDUCATIONAL ADMINISTRATION AND SUPERVISION   4037      3113   \nPHARMACOLOGY                                 5015      3481   \nMATERIALS SCIENCE                            7208      5866   \nMATHEMATICS AND COMPUTER SCIENCE             7184      5874   \n...                                           ...       ...   \nLIBRARY SCIENCE                             16193      7091   \nSCHOOL STUDENT COUNSELING                    2396      1492   \nMILITARY TECHNOLOGIES                        4315      1650   \nCLINICAL PSYCHOLOGY                          7638      5128   \nMISCELLANEOUS FINE ARTS                      8511      6431   \n\n                                            Employed_full_time_year_round  \\\nMajor                                                                       \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING                               3350   \nEDUCATIONAL ADMINISTRATION AND SUPERVISION                           2468   \nPHARMACOLOGY                                                         2579   \nMATERIALS SCIENCE                                                    4505   \nMATHEMATICS AND COMPUTER SCIENCE                                     5039   \n...                                                                   ...   \nLIBRARY SCIENCE                                                      4330   \nSCHOOL STUDENT COUNSELING                                            1093   \nMILITARY TECHNOLOGIES                                                1708   \nCLINICAL PSYCHOLOGY                                                  3297   \nMISCELLANEOUS FINE ARTS                                              3802   \n\n                                            Unemployed  Unemployment_rate  \\\nMajor                                                                       \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING               0           0.000000   \nEDUCATIONAL ADMINISTRATION AND SUPERVISION           0           0.000000   \nPHARMACOLOGY                                        57           0.016111   \nMATERIALS SCIENCE                                  134           0.022333   \nMATHEMATICS AND COMPUTER SCIENCE                   150           0.024900   \n...                                                ...                ...   \nLIBRARY SCIENCE                                    743           0.094843   \nSCHOOL STUDENT COUNSELING                          169           0.101746   \nMILITARY TECHNOLOGIES                              187           0.101796   \nCLINICAL PSYCHOLOGY                                587           0.102712   \nMISCELLANEOUS FINE ARTS                           1190           0.156147   \n\n                                            Median  P25th     P75th  \nMajor                                                                \nGEOLOGICAL AND GEOPHYSICAL ENGINEERING       85000  55000  125000.0  \nEDUCATIONAL ADMINISTRATION AND SUPERVISION   58000  44750   79000.0  \nPHARMACOLOGY                                 60000  35000  105000.0  \nMATERIALS SCIENCE                            75000  60000  100000.0  \nMATHEMATICS AND COMPUTER SCIENCE             92000  53000  136000.0  \n...                                            ...    ...       ...  \nLIBRARY SCIENCE                              40000  30000   55000.0  \nSCHOOL STUDENT COUNSELING                    41000  33200   50000.0  \nMILITARY TECHNOLOGIES                        64000  39750   90000.0  \nCLINICAL PSYCHOLOGY                          45000  26100   62000.0  \nMISCELLANEOUS FINE ARTS                      45000  30000   60000.0  \n\n[173 rows x 10 columns]\n\n\n\nimport pandas as pd\ndf = pd.read_csv('./file/recent-grads.csv')\ndf\n\n\n\n\n\n\n\n\nRank\nMajor_code\nMajor\nTotal\nMen\nWomen\nMajor_category\nShareWomen\nSample_size\nEmployed\n...\nPart_time\nFull_time_year_round\nUnemployed\nUnemployment_rate\nMedian\nP25th\nP75th\nCollege_jobs\nNon_college_jobs\nLow_wage_jobs\n\n\n\n\n0\n1\n2419\nPETROLEUM ENGINEERING\n2339.0\n2057.0\n282.0\nEngineering\n0.120564\n36\n1976\n...\n270\n1207\n37\n0.018381\n110000\n95000\n125000\n1534\n364\n193\n\n\n1\n2\n2416\nMINING AND MINERAL ENGINEERING\n756.0\n679.0\n77.0\nEngineering\n0.101852\n7\n640\n...\n170\n388\n85\n0.117241\n75000\n55000\n90000\n350\n257\n50\n\n\n2\n3\n2415\nMETALLURGICAL ENGINEERING\n856.0\n725.0\n131.0\nEngineering\n0.153037\n3\n648\n...\n133\n340\n16\n0.024096\n73000\n50000\n105000\n456\n176\n0\n\n\n3\n4\n2417\nNAVAL ARCHITECTURE AND MARINE ENGINEERING\n1258.0\n1123.0\n135.0\nEngineering\n0.107313\n16\n758\n...\n150\n692\n40\n0.050125\n70000\n43000\n80000\n529\n102\n0\n\n\n4\n5\n2405\nCHEMICAL ENGINEERING\n32260.0\n21239.0\n11021.0\nEngineering\n0.341631\n289\n25694\n...\n5180\n16697\n1672\n0.061098\n65000\n50000\n75000\n18314\n4440\n972\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n168\n169\n3609\nZOOLOGY\n8409.0\n3050.0\n5359.0\nBiology & Life Science\n0.637293\n47\n6259\n...\n2190\n3602\n304\n0.046320\n26000\n20000\n39000\n2771\n2947\n743\n\n\n169\n170\n5201\nEDUCATIONAL PSYCHOLOGY\n2854.0\n522.0\n2332.0\nPsychology & Social Work\n0.817099\n7\n2125\n...\n572\n1211\n148\n0.065112\n25000\n24000\n34000\n1488\n615\n82\n\n\n170\n171\n5202\nCLINICAL PSYCHOLOGY\n2838.0\n568.0\n2270.0\nPsychology & Social Work\n0.799859\n13\n2101\n...\n648\n1293\n368\n0.149048\n25000\n25000\n40000\n986\n870\n622\n\n\n171\n172\n5203\nCOUNSELING PSYCHOLOGY\n4626.0\n931.0\n3695.0\nPsychology & Social Work\n0.798746\n21\n3777\n...\n965\n2738\n214\n0.053621\n23400\n19200\n26000\n2403\n1245\n308\n\n\n172\n173\n3501\nLIBRARY SCIENCE\n1098.0\n134.0\n964.0\nEducation\n0.877960\n2\n742\n...\n237\n410\n87\n0.104946\n22000\n20000\n22000\n288\n338\n192\n\n\n\n\n173 rows × 21 columns\n\n\n\n\n# 按照专业分组，将女生占比从高到低降序排列\nresult = df.groupby([\"Major\"]).sum().sort_values([\"ShareWomen\"],ascending=False)\nprint(result)\n\n                                               Rank  Major_code     Total  \\\nMajor                                                                       \nEARLY CHILDHOOD EDUCATION                       165        2307   37589.0   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES   164        6102   38279.0   \nMEDICAL ASSISTING SERVICES                       52        6104   11123.0   \nELEMENTARY EDUCATION                            139        2304  170862.0   \nFAMILY AND CONSUMER SCIENCES                    151        2901   58001.0   \n...                                             ...         ...       ...   \nMINING AND MINERAL ENGINEERING                    2        2416     756.0   \nCONSTRUCTION SERVICES                            27        5601   18498.0   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES      67        2504    4790.0   \nMILITARY TECHNOLOGIES                            74        3801     124.0   \nFOOD SCIENCE                                     22        1104       0.0   \n\n                                                   Men     Women  \\\nMajor                                                              \nEARLY CHILDHOOD EDUCATION                       1167.0   36422.0   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES   1225.0   37054.0   \nMEDICAL ASSISTING SERVICES                       803.0   10320.0   \nELEMENTARY EDUCATION                           13029.0  157833.0   \nFAMILY AND CONSUMER SCIENCES                    5166.0   52835.0   \n...                                                ...       ...   \nMINING AND MINERAL ENGINEERING                   679.0      77.0   \nCONSTRUCTION SERVICES                          16820.0    1678.0   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES     4419.0     371.0   \nMILITARY TECHNOLOGIES                            124.0       0.0   \nFOOD SCIENCE                                       0.0       0.0   \n\n                                                                    Major_category  \\\nMajor                                                                                \nEARLY CHILDHOOD EDUCATION                                                Education   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES                               Health   \nMEDICAL ASSISTING SERVICES                                                  Health   \nELEMENTARY EDUCATION                                                     Education   \nFAMILY AND CONSUMER SCIENCES                   Industrial Arts & Consumer Services   \n...                                                                            ...   \nMINING AND MINERAL ENGINEERING                                         Engineering   \nCONSTRUCTION SERVICES                          Industrial Arts & Consumer Services   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES                            Engineering   \nMILITARY TECHNOLOGIES                          Industrial Arts & Consumer Services   \nFOOD SCIENCE                                       Agriculture & Natural Resources   \n\n                                               ShareWomen  Sample_size  \\\nMajor                                                                    \nEARLY CHILDHOOD EDUCATION                        0.968954          342   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES    0.967998           95   \nMEDICAL ASSISTING SERVICES                       0.927807           67   \nELEMENTARY EDUCATION                             0.923745         1629   \nFAMILY AND CONSUMER SCIENCES                     0.910933          518   \n...                                                   ...          ...   \nMINING AND MINERAL ENGINEERING                   0.101852            7   \nCONSTRUCTION SERVICES                            0.090713          295   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES      0.077453           71   \nMILITARY TECHNOLOGIES                            0.000000            4   \nFOOD SCIENCE                                     0.000000           36   \n\n                                               Employed  Full_time  Part_time  \\\nMajor                                                                           \nEARLY CHILDHOOD EDUCATION                         32551      27569       7001   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES     29763      19975      13862   \nMEDICAL ASSISTING SERVICES                         9168       5643       4107   \nELEMENTARY EDUCATION                             149339     123177      37965   \nFAMILY AND CONSUMER SCIENCES                      46624      36747      15872   \n...                                                 ...        ...        ...   \nMINING AND MINERAL ENGINEERING                      640        556        170   \nCONSTRUCTION SERVICES                             16318      15690       1751   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES        4186       4175        247   \nMILITARY TECHNOLOGIES                                 0        111          0   \nFOOD SCIENCE                                       3149       2558       1121   \n\n                                               Full_time_year_round  \\\nMajor                                                                 \nEARLY CHILDHOOD EDUCATION                                     20748   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES                 14460   \nMEDICAL ASSISTING SERVICES                                     4290   \nELEMENTARY EDUCATION                                          86540   \nFAMILY AND CONSUMER SCIENCES                                  26906   \n...                                                             ...   \nMINING AND MINERAL ENGINEERING                                  388   \nCONSTRUCTION SERVICES                                         12313   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES                    3607   \nMILITARY TECHNOLOGIES                                           111   \nFOOD SCIENCE                                                   1735   \n\n                                               Unemployed  Unemployment_rate  \\\nMajor                                                                          \nEARLY CHILDHOOD EDUCATION                            1360           0.040105   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES        1487           0.047584   \nMEDICAL ASSISTING SERVICES                            407           0.042507   \nELEMENTARY EDUCATION                                 7297           0.046586   \nFAMILY AND CONSUMER SCIENCES                         3355           0.067128   \n...                                                   ...                ...   \nMINING AND MINERAL ENGINEERING                         85           0.117241   \nCONSTRUCTION SERVICES                                1042           0.060023   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES           250           0.056357   \nMILITARY TECHNOLOGIES                                   0           0.000000   \nFOOD SCIENCE                                          338           0.096931   \n\n                                               Median  P25th  P75th  \\\nMajor                                                                 \nEARLY CHILDHOOD EDUCATION                       28000  21000  35000   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES   28000  20000  40000   \nMEDICAL ASSISTING SERVICES                      42000  30000  65000   \nELEMENTARY EDUCATION                            32000  23400  38000   \nFAMILY AND CONSUMER SCIENCES                    30000  22900  40000   \n...                                               ...    ...    ...   \nMINING AND MINERAL ENGINEERING                  75000  55000  90000   \nCONSTRUCTION SERVICES                           50000  36000  60000   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES     40000  27000  52000   \nMILITARY TECHNOLOGIES                           40000  40000  40000   \nFOOD SCIENCE                                    53000  32000  70000   \n\n                                               College_jobs  Non_college_jobs  \\\nMajor                                                                           \nEARLY CHILDHOOD EDUCATION                             23515              7705   \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES         19957              9404   \nMEDICAL ASSISTING SERVICES                             2091              6948   \nELEMENTARY EDUCATION                                 108085             36972   \nFAMILY AND CONSUMER SCIENCES                          20985             20133   \n...                                                     ...               ...   \nMINING AND MINERAL ENGINEERING                          350               257   \nCONSTRUCTION SERVICES                                  3275              5351   \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES            1861              2121   \nMILITARY TECHNOLOGIES                                     0                 0   \nFOOD SCIENCE                                           1183              1274   \n\n                                               Low_wage_jobs  \nMajor                                                         \nEARLY CHILDHOOD EDUCATION                               2868  \nCOMMUNICATION DISORDERS SCIENCES AND SERVICES           5125  \nMEDICAL ASSISTING SERVICES                              1270  \nELEMENTARY EDUCATION                                   11502  \nFAMILY AND CONSUMER SCIENCES                            5248  \n...                                                      ...  \nMINING AND MINERAL ENGINEERING                            50  \nCONSTRUCTION SERVICES                                    703  \nMECHANICAL ENGINEERING RELATED TECHNOLOGIES              406  \nMILITARY TECHNOLOGIES                                      0  \nFOOD SCIENCE                                             485  \n\n[173 rows x 20 columns]\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\na=df['Median'].groupby(df['Major_category']).sum()\na.plot.bar()\nplt.show()"
  },
  {
    "objectID": "homework/homework5.html",
    "href": "homework/homework5.html",
    "title": "Xuliqin The homework5",
    "section": "",
    "text": "import pandas as pd\nurl ='https://raw.githubusercontent.com/tidyverse/datascience-box/refs/heads/main/course-materials/lab-instructions/lab-02/data/plastic-waste.csv'\ndf = pd.read_csv(url)\ndf\n\n\n\n\n\n\n\n\ncode\nentity\ncontinent\nyear\ngdp_per_cap\nplastic_waste_per_cap\nmismanaged_plastic_waste_per_cap\nmismanaged_plastic_waste\ncoastal_pop\ntotal_pop\n\n\n\n\n0\nAFG\nAfghanistan\nAsia\n2010\n1614.255001\nNaN\nNaN\nNaN\nNaN\n31411743.0\n\n\n1\nALB\nAlbania\nEurope\n2010\n9927.181841\n0.069\n0.032\n29705.0\n2530533.0\n3204284.0\n\n\n2\nDZA\nAlgeria\nAfrica\n2010\n12870.602699\n0.144\n0.086\n520555.0\n16556580.0\n35468208.0\n\n\n3\nASM\nAmerican Samoa\nOceania\n2010\nNaN\nNaN\nNaN\nNaN\nNaN\n68420.0\n\n\n4\nAND\nAndorra\nEurope\n2010\nNaN\nNaN\nNaN\nNaN\nNaN\n84864.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n235\nVNM\nVietnam\nAsia\n2010\n4408.168612\n0.103\n0.090\n1833819.0\n55858245.0\n87848445.0\n\n\n236\nESH\nWestern Sahara\nAfrica\n2010\nNaN\nNaN\nNaN\nNaN\nNaN\n530500.0\n\n\n237\nYEM\nYemen\nAsia\n2010\n4478.743599\n0.103\n0.077\n169181.0\n6048920.0\nNaN\n\n\n238\nZMB\nZambia\nAfrica\n2010\n3279.277161\nNaN\nNaN\nNaN\nNaN\n13088570.0\n\n\n239\nZWE\nZimbabwe\nAfrica\n2010\n1474.877128\nNaN\nNaN\nNaN\nNaN\n12571454.0\n\n\n\n\n240 rows × 10 columns\n\n\n\n\nimport pandas as pd\nfrom lets_plot import *\n\nLetsPlot.setup_html()\n\n\n            \n            \n            \n\n\n\n(\n  ggplot(df, aes(\"continent\", \"plastic_waste_per_cap\")) +\n  geom_histogram()\n)\n\n   \n   \n\n\n\n(\n  ggplot(df, aes(\"continent\", \"plastic_waste_per_cap\"))\n  + geom_boxplot()\n)\n\n   \n   \n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 利用violinplot函数绘制小提琴图\nsns.violinplot(x=df[\"continent\"], y=df[\"plastic_waste_per_cap\"])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n(\n    ggplot(df, aes(\"plastic_waste_per_cap\", \"mismanaged_plastic_waste_per_cap\")) +\n  geom_point()\n)\n\n   \n   \n\n\n\n(\n    ggplot(\n        df,\n        aes(\n            \"plastic_waste_per_cap\",\n            \"mismanaged_plastic_waste_per_cap\",\n            colour=\"continent\",\n        ),\n    )\n    + geom_point()\n)\n\n   \n   \n\n\n\n(\n    ggplot(df, aes(x=\"total_pop\", y=\"plastic_waste_per_cap\", colour=\"continent\"))\n    + geom_point()\n    + xlim(0, 150000000)\n    + ylim(0, 0.8)\n)\n\n   \n   \n\n\n\n(\n    ggplot(df, aes(x=\"coastal_pop\", y=\"plastic_waste_per_cap\", colour=\"continent\"))\n    + geom_point()\n    + xlim(0, 50000000)\n    + ylim(0, 0.8)\n)"
  },
  {
    "objectID": "practice/practice1106/index.html",
    "href": "practice/practice1106/index.html",
    "title": "Xuliqin Practice1106",
    "section": "",
    "text": "%pip install pandas matplotlib numpy pathlib pingouin lets_plot\n\nRequirement already satisfied: pandas in d:\\program files\\python3.12.7\\lib\\site-packages (2.2.3)Note: you may need to restart the kernel to use updated packages.\n\nRequirement already satisfied: matplotlib in d:\\program files\\python3.12.7\\lib\\site-packages (3.9.2)\nRequirement already satisfied: numpy in d:\\program files\\python3.12.7\\lib\\site-packages (1.26.4)\nRequirement already satisfied: pathlib in d:\\program files\\python3.12.7\\lib\\site-packages (1.0.1)\nRequirement already satisfied: pingouin in d:\\program files\\python3.12.7\\lib\\site-packages (0.5.5)\nRequirement already satisfied: lets_plot in d:\\program files\\python3.12.7\\lib\\site-packages (4.5.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in d:\\program files\\python3.12.7\\lib\\site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in d:\\program files\\python3.12.7\\lib\\site-packages (from pandas) (2024.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in d:\\program files\\python3.12.7\\lib\\site-packages (from pandas) (2024.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (1.3.0)\nRequirement already satisfied: cycler&gt;=0.10 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (4.54.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (1.4.7)\nRequirement already satisfied: packaging&gt;=20.0 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (24.1)\nRequirement already satisfied: pillow&gt;=8 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (11.0.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in d:\\program files\\python3.12.7\\lib\\site-packages (from matplotlib) (3.2.0)\nRequirement already satisfied: pandas-flavor in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (0.6.0)\nRequirement already satisfied: scikit-learn&gt;=1.2 in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (1.6.0)\nRequirement already satisfied: scipy in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (1.14.1)\nRequirement already satisfied: seaborn in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (0.13.2)\nRequirement already satisfied: statsmodels in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (0.14.4)\nRequirement already satisfied: tabulate in d:\\program files\\python3.12.7\\lib\\site-packages (from pingouin) (0.9.0)\nRequirement already satisfied: pypng in d:\\program files\\python3.12.7\\lib\\site-packages (from lets_plot) (0.20220715.0)\nRequirement already satisfied: palettable in d:\\program files\\python3.12.7\\lib\\site-packages (from lets_plot) (3.3.3)\nRequirement already satisfied: six&gt;=1.5 in d:\\program files\\python3.12.7\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.16.0)\nRequirement already satisfied: joblib&gt;=1.2.0 in d:\\program files\\python3.12.7\\lib\\site-packages (from scikit-learn&gt;=1.2-&gt;pingouin) (1.4.2)\nRequirement already satisfied: threadpoolctl&gt;=3.1.0 in d:\\program files\\python3.12.7\\lib\\site-packages (from scikit-learn&gt;=1.2-&gt;pingouin) (3.5.0)\nRequirement already satisfied: xarray in d:\\program files\\python3.12.7\\lib\\site-packages (from pandas-flavor-&gt;pingouin) (2024.11.0)\nRequirement already satisfied: patsy&gt;=0.5.6 in d:\\program files\\python3.12.7\\lib\\site-packages (from statsmodels-&gt;pingouin) (1.0.1)\n\n\n\n[notice] A new release of pip is available: 24.2 -&gt; 24.3.1\n[notice] To update, run: pythonw.exe -m pip install --upgrade pip\n\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\n# !pip install lets-plot\nfrom lets_plot import *\nLetsPlot.setup_html(no_js=True)\nplt.style.use(\"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\")\n\n\ndf = pd.read_csv(\n    \"https://data.giss.nasa.gov/gistemp/tabledata_v4/NH.Ts+dSST.csv\",\n    skiprows=1,\n    na_values=\"***\",\n)\ndf.head()\n\n\n\n\n\n\n\n\nYear\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\n\n\n0\n1880\n-0.39\n-0.53\n-0.23\n-0.30\n-0.05\n-0.18\n-0.22\n-0.25\n-0.24\n-0.30\n-0.43\n-0.42\n-0.30\nNaN\nNaN\n-0.20\n-0.22\n-0.32\n\n\n1\n1881\n-0.31\n-0.25\n-0.06\n-0.02\n0.05\n-0.34\n0.09\n-0.06\n-0.28\n-0.44\n-0.37\n-0.24\n-0.19\n-0.20\n-0.33\n-0.01\n-0.10\n-0.37\n\n\n2\n1882\n0.25\n0.21\n0.02\n-0.30\n-0.23\n-0.29\n-0.28\n-0.15\n-0.25\n-0.52\n-0.33\n-0.68\n-0.21\n-0.17\n0.08\n-0.17\n-0.24\n-0.37\n\n\n3\n1883\n-0.57\n-0.66\n-0.15\n-0.30\n-0.26\n-0.12\n-0.06\n-0.23\n-0.34\n-0.17\n-0.44\n-0.15\n-0.29\n-0.33\n-0.64\n-0.23\n-0.14\n-0.32\n\n\n4\n1884\n-0.16\n-0.11\n-0.64\n-0.59\n-0.36\n-0.41\n-0.41\n-0.52\n-0.45\n-0.44\n-0.58\n-0.47\n-0.43\n-0.40\n-0.14\n-0.53\n-0.45\n-0.49\n\n\n\n\n\n\n\n\ndf.info()\nna_values=\"***\"\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 145 entries, 0 to 144\nData columns (total 19 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Year    145 non-null    int64  \n 1   Jan     145 non-null    float64\n 2   Feb     145 non-null    float64\n 3   Mar     145 non-null    float64\n 4   Apr     145 non-null    float64\n 5   May     145 non-null    float64\n 6   Jun     145 non-null    float64\n 7   Jul     145 non-null    float64\n 8   Aug     145 non-null    float64\n 9   Sep     145 non-null    float64\n 10  Oct     145 non-null    float64\n 11  Nov     145 non-null    float64\n 12  Dec     144 non-null    float64\n 13  J-D     144 non-null    float64\n 14  D-N     144 non-null    float64\n 15  DJF     144 non-null    float64\n 16  MAM     145 non-null    float64\n 17  JJA     145 non-null    float64\n 18  SON     145 non-null    float64\ndtypes: float64(18), int64(1)\nmemory usage: 21.7 KB\n\n\n\ndf = df.set_index(\"Year\")\ndf.head()\n\n\n\n\n\n\n\n\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1880\n-0.39\n-0.53\n-0.23\n-0.30\n-0.05\n-0.18\n-0.22\n-0.25\n-0.24\n-0.30\n-0.43\n-0.42\n-0.30\nNaN\nNaN\n-0.20\n-0.22\n-0.32\n\n\n1881\n-0.31\n-0.25\n-0.06\n-0.02\n0.05\n-0.34\n0.09\n-0.06\n-0.28\n-0.44\n-0.37\n-0.24\n-0.19\n-0.20\n-0.33\n-0.01\n-0.10\n-0.37\n\n\n1882\n0.25\n0.21\n0.02\n-0.30\n-0.23\n-0.29\n-0.28\n-0.15\n-0.25\n-0.52\n-0.33\n-0.68\n-0.21\n-0.17\n0.08\n-0.17\n-0.24\n-0.37\n\n\n1883\n-0.57\n-0.66\n-0.15\n-0.30\n-0.26\n-0.12\n-0.06\n-0.23\n-0.34\n-0.17\n-0.44\n-0.15\n-0.29\n-0.33\n-0.64\n-0.23\n-0.14\n-0.32\n\n\n1884\n-0.16\n-0.11\n-0.64\n-0.59\n-0.36\n-0.41\n-0.41\n-0.52\n-0.45\n-0.44\n-0.58\n-0.47\n-0.43\n-0.40\n-0.14\n-0.53\n-0.45\n-0.49\n\n\n\n\n\n\n\n\ndf.tail()\n\n\n\n\n\n\n\n\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2020\n1.59\n1.69\n1.66\n1.39\n1.27\n1.14\n1.10\n1.12\n1.19\n1.21\n1.58\n1.18\n1.34\n1.36\n1.56\n1.44\n1.12\n1.33\n\n\n2021\n1.25\n0.96\n1.20\n1.13\n1.05\n1.21\n1.07\n1.02\n1.05\n1.29\n1.29\n1.17\n1.14\n1.14\n1.13\n1.13\n1.10\n1.21\n\n\n2022\n1.24\n1.16\n1.41\n1.09\n1.02\n1.13\n1.06\n1.17\n1.15\n1.31\n1.09\n1.06\n1.16\n1.17\n1.19\n1.17\n1.12\n1.19\n\n\n2023\n1.29\n1.29\n1.64\n1.01\n1.13\n1.19\n1.44\n1.57\n1.67\n1.88\n1.97\n1.85\n1.50\n1.43\n1.22\n1.26\n1.40\n1.84\n\n\n2024\n1.67\n1.93\n1.77\n1.79\n1.44\n1.54\n1.42\n1.42\n1.58\n1.72\n1.90\nNaN\nNaN\n1.67\n1.82\n1.67\n1.46\n1.73\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\ndf[\"Jan\"].plot(ax=ax)\nax.set_ylabel(\"y label\")\nax.set_xlabel(\"x label\")\nax.set_title(\"title\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\nax.plot(df.index, df[\"Jan\"])\nax.set_ylabel(\"y label\")\nax.set_xlabel(\"x label\")\nax.set_title(\"title\")\nplt.show()\n\n\n\n\n\n\n\n\n\nmonth = \"Jan\"\nfig, ax = plt.subplots()\nax.axhline(0, color=\"orange\")\nax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\ndf[month].plot(ax=ax)\nax.set_title(\n    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880—{df.index.max()})\"\n)\nax.set_ylabel(\"Annual temperature anomalies\")\n\nText(0, 0.5, 'Annual temperature anomalies')\n\n\n\n\n\n\n\n\n\n\nmonth = \"J-D\"\nfig, ax = plt.subplots()\nax.axhline(0, color=\"orange\")\nax.annotate(\"1951—1980 average\", xy=(0.68, -0.2), xycoords=(\"figure fraction\", \"data\"))\ndf[month].plot(ax=ax)\nax.set_title(\n    f\"Average annual temperature anomaly in \\n in the northern hemisphere (1880—{df.index.max()})\"\n)\nax.set_ylabel(\"Annual temperature anomalies\")\n\nText(0, 0.5, 'Annual temperature anomalies')\n\n\n\n\n\n\n\n\n\n\ndf[\"Period\"] = pd.cut(\n    df.index,\n    bins=[1921, 1950, 1980, 2010],\n    labels=[\"1921—1950\", \"1951—1980\", \"1981—2010\"],\n    ordered=True,\n)\ndf[\"Period\"].tail(20)\n\nYear\n2005    1981—2010\n2006    1981—2010\n2007    1981—2010\n2008    1981—2010\n2009    1981—2010\n2010    1981—2010\n2011          NaN\n2012          NaN\n2013          NaN\n2014          NaN\n2015          NaN\n2016          NaN\n2017          NaN\n2018          NaN\n2019          NaN\n2020          NaN\n2021          NaN\n2022          NaN\n2023          NaN\n2024          NaN\nName: Period, dtype: category\nCategories (3, object): ['1921—1950' &lt; '1951—1980' &lt; '1981—2010']\n\n\n\nlist_of_months = [\"Jun\", \"Jul\", \"Aug\"]\ndf[list_of_months].stack().head()\n\nYear     \n1880  Jun   -0.18\n      Jul   -0.22\n      Aug   -0.25\n1881  Jun   -0.34\n      Jul    0.09\ndtype: float64\n\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(9, 4), sharex=True, sharey=True)\nfor ax, period in zip(axes, df[\"Period\"].dropna().unique()):\n    df.loc[df[\"Period\"] == period, list_of_months].stack().hist(ax=ax)\n    ax.set_title(period)\nplt.suptitle(\"Histogram of temperature anomalies\")\naxes[1].set_xlabel(\"Summer temperature distribution\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# Create a variable that has years 1951 to 1980, and months Jan to Dec (inclusive)\ntemp_all_months = df.loc[(df.index &gt;= 1951) & (df.index &lt;= 1980), \"Jan\":\"Dec\"]\n# Put all the data in stacked format and give the new columns sensible names\ntemp_all_months = (\n    temp_all_months.stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n)\n# Take a look at this data:\ntemp_all_months\n\n\n\n\n\n\n\n\nYear\nmonth\nvalues\n\n\n\n\n0\n1951\nJan\n-0.36\n\n\n1\n1951\nFeb\n-0.51\n\n\n2\n1951\nMar\n-0.18\n\n\n3\n1951\nApr\n0.06\n\n\n4\n1951\nMay\n0.17\n\n\n...\n...\n...\n...\n\n\n355\n1980\nAug\n0.10\n\n\n356\n1980\nSep\n0.10\n\n\n357\n1980\nOct\n0.12\n\n\n358\n1980\nNov\n0.21\n\n\n359\n1980\nDec\n0.09\n\n\n\n\n360 rows × 3 columns\n\n\n\n\nquantiles = [0.3, 0.7]\nlist_of_percentiles = np.quantile(temp_all_months[\"values\"], q=quantiles)\n\nprint(f\"The cold threshold of {quantiles[0]*100}% is {list_of_percentiles[0]}\")\nprint(f\"The hot threshold of {quantiles[1]*100}% is {list_of_percentiles[1]}\")\n\nThe cold threshold of 30.0% is -0.1\nThe hot threshold of 70.0% is 0.1\n\n\n\n# Create a variable that has years 1981 to 2010, and months Jan to Dec (inclusive)\ntemp_all_months = df.loc[(df.index &gt;= 1981) & (df.index &lt;= 2010), \"Jan\":\"Dec\"]\n# Put all the data in stacked format and give the new columns sensible names\ntemp_all_months = (\n    temp_all_months.stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n)\n# Take a look at the start of this data data:\ntemp_all_months.head()\n\n\n\n\n\n\n\n\nYear\nmonth\nvalues\n\n\n\n\n0\n1981\nJan\n0.80\n\n\n1\n1981\nFeb\n0.62\n\n\n2\n1981\nMar\n0.68\n\n\n3\n1981\nApr\n0.39\n\n\n4\n1981\nMay\n0.18\n\n\n\n\n\n\n\n\nentries_less_than_q30 = temp_all_months[\"values\"] &lt; list_of_percentiles[0]\nproportion_under_q30 = entries_less_than_q30.mean()\nprint(\n    f\"The proportion under {list_of_percentiles[0]} is {proportion_under_q30*100:.2f}%\"\n)\n\nThe proportion under -0.1 is 1.94%\n\n\n\nproportion_over_q70 = (temp_all_months[\"values\"] &gt; list_of_percentiles[1]).mean()\nprint(f\"The proportion over {list_of_percentiles[1]} is {proportion_over_q70*100:.2f}%\")\n\nThe proportion over 0.1 is 84.72%\n\n\n\ntemp_all_months = (\n    df.loc[:, \"DJF\":\"SON\"]\n    .stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"Season\", 0: \"Values\"})\n)\ntemp_all_months[\"Period\"] = pd.cut(\n    temp_all_months[\"Year\"],\n    bins=[1921, 1950, 1980, 2010],\n    labels=[\"1921—1950\", \"1951—1980\", \"1981—2010\"],\n    ordered=True,\n)\n# Take a look at a cut of the data using `.iloc`, which provides position\ntemp_all_months.iloc[-135:-125]\n\n\n\n\n\n\n\n\nYear\nSeason\nValues\nPeriod\n\n\n\n\n444\n1991\nMAM\n0.45\n1981—2010\n\n\n445\n1991\nJJA\n0.42\n1981—2010\n\n\n446\n1991\nSON\n0.32\n1981—2010\n\n\n447\n1992\nDJF\n0.43\n1981—2010\n\n\n448\n1992\nMAM\n0.29\n1981—2010\n\n\n449\n1992\nJJA\n-0.04\n1981—2010\n\n\n450\n1992\nSON\n-0.15\n1981—2010\n\n\n451\n1993\nDJF\n0.37\n1981—2010\n\n\n452\n1993\nMAM\n0.31\n1981—2010\n\n\n453\n1993\nJJA\n0.12\n1981—2010\n\n\n\n\n\n\n\n\ngrp_mean_var = temp_all_months.groupby([\"Season\", \"Period\"], observed=False)[\"Values\"].agg(\n    [\"mean\", \"var\"]\n)\ngrp_mean_var\n\n\n\n\n\n\n\n\n\nmean\nvar\n\n\nSeason\nPeriod\n\n\n\n\n\n\nDJF\n1921—1950\n-0.025862\n0.057489\n\n\n1951—1980\n-0.002000\n0.050548\n\n\n1981—2010\n0.523333\n0.078975\n\n\nJJA\n1921—1950\n-0.053448\n0.021423\n\n\n1951—1980\n0.000000\n0.014697\n\n\n1981—2010\n0.400000\n0.067524\n\n\nMAM\n1921—1950\n-0.041034\n0.031302\n\n\n1951—1980\n0.000333\n0.025245\n\n\n1981—2010\n0.509333\n0.075737\n\n\nSON\n1921—1950\n0.083448\n0.027473\n\n\n1951—1980\n-0.001333\n0.026205\n\n\n1981—2010\n0.429000\n0.111127\n\n\n\n\n\n\n\n\nmin_year = 1880\n(\n    ggplot(temp_all_months, aes(x=\"Year\", y=\"Values\", color=\"Season\"))\n    + geom_abline(slope=0, color=\"black\", size=1)\n    + geom_line(size=1)\n    + labs(\n        title=f\"Average annual temperature anomaly in \\n in the northern hemisphere ({min_year}—{temp_all_months['Year'].max()})\",\n        y=\"Annual temperature anomalies\",\n    )\n    + scale_x_continuous(format=\"d\")\n    + geom_text(\n        x=min_year, y=0.1, label=\"1951—1980 average\", hjust=\"left\", color=\"black\"\n    )\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n              \n            \n            \n              \n                \n                \n              \n              \n                \n                \n              \n              \n                \n                \n              \n              \n                \n                \n              \n            \n            \n              \n                \n                  \n                    1951—1980 average\n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n        \n          \n            \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                1880\n              \n            \n          \n          \n            \n            \n            \n              \n                1900\n              \n            \n          \n          \n            \n            \n            \n              \n                1920\n              \n            \n          \n          \n            \n            \n            \n              \n                1940\n              \n            \n          \n          \n            \n            \n            \n              \n                1960\n              \n            \n          \n          \n            \n            \n            \n              \n                1980\n              \n            \n          \n          \n            \n            \n            \n              \n                2000\n              \n            \n          \n          \n            \n            \n            \n              \n                2020\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                -1.0\n              \n            \n          \n          \n            \n              \n                -0.5\n              \n            \n          \n          \n            \n              \n                0.0\n              \n            \n          \n          \n            \n              \n                0.5\n              \n            \n          \n          \n            \n              \n                1.0\n              \n            \n          \n          \n            \n              \n                1.5\n              \n            \n          \n        \n      \n    \n    \n      \n        Average annual temperature anomaly in \n      \n      \n         in the northern hemisphere (1880—2024)\n      \n    \n    \n      \n        Annual temperature anomalies\n      \n    \n    \n      \n        Year\n      \n    \n    \n      \n      \n      \n        \n          \n            Season\n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                MAM\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                JJA\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                SON\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                DJF\n              \n            \n          \n        \n      \n    \n    \n    \n  \n  \n  \n\n\n\n\ndf_co2 = pd.read_csv(\"./file/data2.csv\")\ndf_co2.head()\n\n\n\n\n\n\n\n\nYear\nMonth\nMonthly average\nInterpolated\nTrend\n\n\n\n\n0\n1958\n3\n315.71\n315.71\n314.62\n\n\n1\n1958\n4\n317.45\n317.45\n315.29\n\n\n2\n1958\n5\n317.50\n317.50\n314.71\n\n\n3\n1958\n6\n-99.99\n317.10\n314.85\n\n\n4\n1958\n7\n315.86\n315.86\n314.98\n\n\n\n\n\n\n\n\ndf_co2_june = df_co2.loc[df_co2[\"Month\"] == 6]\ndf_co2_june.head()\n\n\n\n\n\n\n\n\nYear\nMonth\nMonthly average\nInterpolated\nTrend\n\n\n\n\n3\n1958\n6\n-99.99\n317.10\n314.85\n\n\n15\n1959\n6\n318.15\n318.15\n315.92\n\n\n27\n1960\n6\n319.59\n319.59\n317.36\n\n\n39\n1961\n6\n319.77\n319.77\n317.48\n\n\n51\n1962\n6\n320.55\n320.55\n318.27\n\n\n\n\n\n\n\n\ndf_temp_co2 = pd.merge(df_co2_june, df, on=\"Year\")\ndf_temp_co2[[\"Year\", \"Jun\", \"Trend\"]].head()\n\n\n\n\n\n\n\n\nYear\nJun\nTrend\n\n\n\n\n0\n1958\n0.05\n314.85\n\n\n1\n1959\n0.14\n315.92\n\n\n2\n1960\n0.18\n317.36\n\n\n3\n1961\n0.18\n317.48\n\n\n4\n1962\n-0.13\n318.27\n\n\n\n\n\n\n\n\n(\n    ggplot(df_temp_co2, aes(x=\"Jun\", y=\"Trend\"))\n    + geom_point(color=\"black\", size=3)\n    + labs(\n        title=\"Scatterplot of temperature anomalies vs carbon dioxide emissions\",\n        y=\"Carbon dioxide levels (trend, mole fraction)\",\n        x=\"Temperature anomaly (degrees Celsius)\",\n    )\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                -0.2\n              \n            \n          \n          \n            \n            \n            \n              \n                0.0\n              \n            \n          \n          \n            \n            \n            \n              \n                0.2\n              \n            \n          \n          \n            \n            \n            \n              \n                0.4\n              \n            \n          \n          \n            \n            \n            \n              \n                0.6\n              \n            \n          \n          \n            \n            \n            \n              \n                0.8\n              \n            \n          \n          \n            \n            \n            \n              \n                1.0\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                320\n              \n            \n          \n          \n            \n              \n                340\n              \n            \n          \n          \n            \n              \n                360\n              \n            \n          \n          \n            \n              \n                380\n              \n            \n          \n          \n            \n              \n                400\n              \n            \n          \n        \n      \n    \n    \n      \n        Scatterplot of temperature anomalies vs carbon dioxide emissions\n      \n    \n    \n      \n        Carbon dioxide levels (trend, mole fraction)\n      \n    \n    \n      \n        Temperature anomaly (degrees Celsius)\n      \n    \n    \n    \n  \n  \n  \n\n\n\n\ndf_temp_co2[[\"Jun\", \"Trend\"]].corr(method=\"pearson\")\n\n\n\n\n\n\n\n\nJun\nTrend\n\n\n\n\nJun\n1.000000\n0.915419\n\n\nTrend\n0.915419\n1.000000\n\n\n\n\n\n\n\n\n(\n    ggplot(df_temp_co2, aes(x=\"Year\", y=\"Jun\"))\n    + geom_line(size=1)\n    + labs(\n        title=\"June temperature anomalies\",\n    )\n    + scale_x_continuous(format=\"d\")\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                1960\n              \n            \n          \n          \n            \n            \n            \n              \n                1970\n              \n            \n          \n          \n            \n            \n            \n              \n                1980\n              \n            \n          \n          \n            \n            \n            \n              \n                1990\n              \n            \n          \n          \n            \n            \n            \n              \n                2000\n              \n            \n          \n          \n            \n            \n            \n              \n                2010\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                -0.2\n              \n            \n          \n          \n            \n              \n                0.0\n              \n            \n          \n          \n            \n              \n                0.2\n              \n            \n          \n          \n            \n              \n                0.4\n              \n            \n          \n          \n            \n              \n                0.6\n              \n            \n          \n          \n            \n              \n                0.8\n              \n            \n          \n          \n            \n              \n                1.0\n              \n            \n          \n        \n      \n    \n    \n      \n        June temperature anomalies\n      \n    \n    \n      \n        Jun\n      \n    \n    \n      \n        Year\n      \n    \n    \n    \n  \n  \n  \n\n\n\n\nbase_plot = ggplot(df_temp_co2) + scale_x_continuous(format=\"d\")\nplot_p = (\n    base_plot\n    + geom_line(aes(x=\"Year\", y=\"Jun\"), size=1)\n    + labs(title=\"June temperature anomalies\")\n)\nplot_q = (\n    base_plot\n    + geom_line(aes(x=\"Year\", y=\"Trend\"), size=1)\n    + labs(title=\"Carbon dioxide emissions\")\n)\ngggrid([plot_p, plot_q], ncol=2)\n\n\n  \n    \n    \n  \n  \n    \n    \n      \n      \n      \n        \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n          \n          \n            \n              \n              \n            \n          \n        \n        \n          \n            \n              \n              \n              \n                \n                  1960\n                \n              \n            \n            \n              \n              \n              \n                \n                  1970\n                \n              \n            \n            \n              \n              \n              \n                \n                  1980\n                \n              \n            \n            \n              \n              \n              \n                \n                  1990\n                \n              \n            \n            \n              \n              \n              \n                \n                  2000\n                \n              \n            \n            \n              \n              \n              \n                \n                  2010\n                \n              \n            \n            \n            \n          \n          \n            \n              \n                \n                  -0.2\n                \n              \n            \n            \n              \n                \n                  0.0\n                \n              \n            \n            \n              \n                \n                  0.2\n                \n              \n            \n            \n              \n                \n                  0.4\n                \n              \n            \n            \n              \n                \n                  0.6\n                \n              \n            \n            \n              \n                \n                  0.8\n                \n              \n            \n            \n              \n                \n                  1.0\n                \n              \n            \n          \n        \n      \n      \n        \n          June temperature anomalies\n        \n      \n      \n        \n          Jun\n        \n      \n      \n        \n          Year\n        \n      \n      \n      \n    \n    \n    \n  \n  \n    \n    \n      \n      \n      \n        \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n          \n          \n            \n              \n              \n            \n          \n        \n        \n          \n            \n              \n              \n              \n                \n                  1960\n                \n              \n            \n            \n              \n              \n              \n                \n                  1970\n                \n              \n            \n            \n              \n              \n              \n                \n                  1980\n                \n              \n            \n            \n              \n              \n              \n                \n                  1990\n                \n              \n            \n            \n              \n              \n              \n                \n                  2000\n                \n              \n            \n            \n              \n              \n              \n                \n                  2010\n                \n              \n            \n            \n            \n          \n          \n            \n              \n                \n                  320\n                \n              \n            \n            \n              \n                \n                  340\n                \n              \n            \n            \n              \n                \n                  360\n                \n              \n            \n            \n              \n                \n                  380\n                \n              \n            \n            \n              \n                \n                  400\n                \n              \n            \n          \n        \n      \n      \n        \n          Carbon dioxide emissions\n        \n      \n      \n        \n          Trend\n        \n      \n      \n        \n          Year"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Hi, I’m Xu Liqin!",
    "section": "",
    "text": "Github"
  },
  {
    "objectID": "about/index.html#educational-background",
    "href": "about/index.html#educational-background",
    "title": "Hi, I’m Xu Liqin!",
    "section": "Educational Background",
    "text": "Educational Background\nI am a student pursuing a Master’s degree in Educational Administration. I chose this program because I hope to be able to keep up with the pace of educational reform, learn about the latest educational methods and technologies, improve the skills necessary to effectively integrate technology into educational management and administration, and strengthen my professional competitiveness."
  },
  {
    "objectID": "about/index.html#experience-and-research-interests",
    "href": "about/index.html#experience-and-research-interests",
    "title": "Hi, I’m Xu Liqin!",
    "section": "Experience and research interests",
    "text": "Experience and research interests\nPrior to commencing my graduate studies, I gained valuable experience in the field of education. I have worked as a faculty member in higher education, and my work in this position has given me a comprehensive understanding of the complexities of educational administration.\nMy research interests are wide-ranging and include exploring how emerging technologies can be used to improve teaching and learning, streamline administrative processes and enhance communication within educational organisations. In my free time, I engage in self-directed research projects to explore these interests in more depth."
  },
  {
    "objectID": "about/index.html#course-goals",
    "href": "about/index.html#course-goals",
    "title": "Hi, I’m Xu Liqin!",
    "section": "Course Goals",
    "text": "Course Goals\nMy goals for the course Informational technologies in Business are: 1.To be aware of the latest technological trends and their application in business, especially in educational management. 2.To learn and endeavour to master the computer language taught by the teacher and apply it in study, work and life. 3.To learn how to analyse and interpret data effectively in order to make informed decisions in an educational context. 4.To gain an in-depth understanding of the ethical and legal issues involved in the use of technology in education."
  },
  {
    "objectID": "about/index.html#hobbies",
    "href": "about/index.html#hobbies",
    "title": "Hi, I’m Xu Liqin!",
    "section": "Hobbies",
    "text": "Hobbies\n☆Outside of my academic pursuits, I have a passion for cooking. I find joy in trying out new recipes, perfecting my culinary skills and sharing delicious meals with friends and family. Cooking allows me to unwind after a busy day at school or work. ☆In addition, I enjoy playing volleyball, especially air volleyball. The camaraderie, physical exercise and the thrill of competition provide me with a sense of accomplishment and satisfaction."
  },
  {
    "objectID": "practice/practice1114/index.html",
    "href": "practice/practice1114/index.html",
    "title": "Xuliqin Practice1114",
    "section": "",
    "text": "%pip install openpyxl\n\nRequirement already satisfied: openpyxl in d:\\program files\\python3.12.7\\lib\\site-packages (3.1.5)\nRequirement already satisfied: et-xmlfile in d:\\program files\\python3.12.7\\lib\\site-packages (from openpyxl) (2.0.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n[notice] A new release of pip is available: 24.2 -&gt; 24.3.1\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\nLetsPlot.setup_html(no_js=True)\n\n### You don't need to use these settings yourself\n### — they are just here to make the book look nicer!\n# Set the plot style for prettier charts:\nplt.style.use(\"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\")\n\n\ndata_np = pd.read_excel(\n    \"./file/doing-economics-datafile-working-in-excel-project-2.xls\",\n    usecols=\"A:Q\",\n    header=1,\n    index_col=\"Period\",\n)\ndata_n = data_np.iloc[:10, :].copy()\ndata_p = data_np.iloc[14:24, :].copy()\n\nD:\\Program Files\\python3.12.7\\Lib\\site-packages\\openpyxl\\worksheet\\_reader.py:329: UserWarning: Unknown extension is not supported and will be removed\n  warn(msg)\n\n\n\ntest_data = {\n    \"City A\": [14.1, 14.1, 13.7],\n    \"City B\": [11.0, 12.6, 12.1],\n}\n\n\n# Original dataframe\ntest_df = pd.DataFrame.from_dict(test_data)\n# A copy of the dataframe\ntest_copy = test_df.copy()\n# A pointer to the dataframe\ntest_pointer = test_df\n\n\ntest_pointer.iloc[1, 1] = 99\n\n\nprint(\"test_df=\")\nprint(f\"{test_df}\\n\")\nprint(\"test_copy=\")\nprint(f\"{test_copy}\\n\")\n\ntest_df=\n   City A  City B\n0    14.1    11.0\n1    14.1    99.0\n2    13.7    12.1\n\ntest_copy=\n   City A  City B\n0    14.1    11.0\n1    14.1    12.6\n2    13.7    12.1\n\n\n\n\ndata_n.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 10 entries, 1 to 10\nData columns (total 16 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   Copenhagen       10 non-null     object\n 1   Dnipropetrovs’k  10 non-null     object\n 2   Minsk            10 non-null     object\n 3   St. Gallen       10 non-null     object\n 4   Muscat           10 non-null     object\n 5   Samara           10 non-null     object\n 6   Zurich           10 non-null     object\n 7   Boston           10 non-null     object\n 8   Bonn             10 non-null     object\n 9   Chengdu          10 non-null     object\n 10  Seoul            10 non-null     object\n 11  Riyadh           10 non-null     object\n 12  Nottingham       10 non-null     object\n 13  Athens           10 non-null     object\n 14  Istanbul         10 non-null     object\n 15  Melbourne        10 non-null     object\ndtypes: object(16)\nmemory usage: 1.3+ KB\n\n\n\ndata_n = data_n.astype(\"double\")\ndata_p = data_p.astype(\"double\")\n\n\nmean_n_c = data_n.mean(axis=1)\nmean_p_c = data_p.agg(np.mean, axis=1)\n\nC:\\Users\\zhangyongtian\\AppData\\Local\\Temp\\ipykernel_7132\\3801786469.py:2: FutureWarning: The provided callable &lt;function mean at 0x0000028CC7F3D260&gt; is currently using DataFrame.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  mean_p_c = data_p.agg(np.mean, axis=1)\n\n\n\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\")\nmean_p_c.plot(ax=ax, label=\"With punishment\")\nax.set_title(\"Average contributions to the public goods game\")\nax.set_ylabel(\"Average contribution\")\nax.legend()\n\n\n\n\n\n\n\n\n\npartial_names_list = [\"F. Kennedy\", \"Lennon\", \"Maynard Keynes\", \"Wayne\"]\n[\"John \" + name for name in partial_names_list]\n\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n\n\n\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n\n['John F. Kennedy', 'John Lennon', 'John Maynard Keynes', 'John Wayne']\n\n\n\n# Create new dataframe with bars in\ncompare_grps = pd.DataFrame(\n    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],\n    index=[\"Without punishment\", \"With punishment\"],\n)\n# Rename columns to have 'round' in them\ncompare_grps.columns = [\"Round \" + str(i) for i in compare_grps.columns]\n# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)\ncompare_grps = compare_grps.T\n# Make a bar chart\ncompare_grps.plot.bar(rot=0)\n\n\n\n\n\n\n\n\n\nn_c = data_n.agg([\"std\", \"var\", \"mean\"], 1)\nn_c\n\n\n\n\n\n\n\n\nstd\nvar\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n1\n2.020724\n4.083325\n10.578313\n\n\n2\n2.238129\n5.009220\n10.628398\n\n\n3\n2.329569\n5.426891\n10.407079\n\n\n4\n2.068213\n4.277504\n9.813033\n\n\n5\n2.108329\n4.445049\n9.305433\n\n\n6\n2.240881\n5.021549\n8.454844\n\n\n7\n2.136614\n4.565117\n7.837568\n\n\n8\n2.349442\n5.519880\n7.376388\n\n\n9\n2.413845\n5.826645\n6.392985\n\n\n10\n2.187126\n4.783520\n4.383769\n\n\n\n\n\n\n\n\np_c = data_p.agg([\"std\", \"var\", \"mean\"], 1)\n\n\nfig, ax = plt.subplots()\nn_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 standard deviations\n(n_c[\"mean\"] + 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 standard deviations\n(n_c[\"mean\"] - 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_n.columns)):\n    ax.scatter(x=data_n.index, y=data_n.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game without punishment\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\np_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 sd\n(p_c[\"mean\"] + 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 sd\n(p_c[\"mean\"] - 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_p.columns)):\n    ax.scatter(x=data_p.index, y=data_p.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game with punishment\")\nplt.show()\n\n\n\n\n\n\n\n\n\ndata_p.apply(lambda x: x.max() - x.min(), axis=1)\n\nPeriod\n1     10.199675\n2     12.185065\n3     12.689935\n4     12.625000\n5     12.140375\n6     12.827541\n7     13.098931\n8     13.482621\n9     13.496754\n10    11.307360\ndtype: float64\n\n\n\n# A lambda function accepting three inputs, a, b, and c, and calculating the sum of the squares\ntest_function = lambda a, b, c: a**2 + b**2 + c**2\n\n\n# Now we apply the function by handing over (in parenthesis) the following inputs: a=3, b=4 and c=5\ntest_function(3, 4, 5)\n\n50\n\n\n\nrange_function = lambda x: x.max() - x.min()\nrange_p = data_p.apply(range_function, axis=1)\nrange_n = data_n.apply(range_function, axis=1)\n\n\nfig, ax = plt.subplots()\nrange_p.plot(ax=ax, label=\"With punishment\")\nrange_n.plot(ax=ax, label=\"Without punishment\")\nax.set_ylim(0, None)\nax.legend()\nax.set_title(\"Range of contributions to the public goods game\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfuncs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\nsumm_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\nsumm_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\nsumm_n.loc[[1, 10], :].round(2)\n\n\n\n\n\n\n\n\nrange\nmax\nmin\nstd\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n\n\n1\n6.14\n14.10\n7.96\n2.02\n10.58\n\n\n10\n7.38\n8.68\n1.30\n2.19\n4.38\n\n\n\n\n\n\n\n\nsumm_p.loc[[1, 10], :].round(2)\n\n\n\n\n\n\n\n\nrange\nmax\nmin\nstd\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n\n\n1\n10.20\n16.02\n5.82\n3.21\n10.64\n\n\n10\n11.31\n17.51\n6.20\n3.90\n12.87\n\n\n\n\n\n\n\n\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])\n\n\n\n\n\n\n\n\nT\ndof\nalternative\np-val\nCI95%\ncohen-d\nBF10\npower\n\n\n\n\nT-test\n-0.063782\n30\ntwo-sided\n0.949567\n[-2.0, 1.87]\n0.02255\n0.337\n0.050437\n\n\n\n\n\n\n\n\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)\n\n\n\n\n\n\n\n\nT\ndof\nalternative\np-val\nCI95%\ncohen-d\nBF10\npower\n\n\n\n\nT-test\n-0.149959\n15\ntwo-sided\n0.882795\n[-0.92, 0.8]\n0.02255\n0.258\n0.05082"
  },
  {
    "objectID": "practice/practice1127/practice1127-1.html",
    "href": "practice/practice1127/practice1127-1.html",
    "title": "Xuliqin Practice1127-1",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport textwrap\n\n\npd.read_csv(\n    \"https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv\", nrows=10\n)\n\n\n\n\n\n\n\n\nrownames\nname\nyear\nmonth\nday\nhour\nlat\nlong\nstatus\ncategory\nwind\npressure\ntropicalstorm_force_diameter\nhurricane_force_diameter\n\n\n\n\n0\n1\nAmy\n1975\n6\n27\n0\n27.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n1\n2\nAmy\n1975\n6\n27\n6\n28.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n2\n3\nAmy\n1975\n6\n27\n12\n29.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n3\n4\nAmy\n1975\n6\n27\n18\n30.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n4\n5\nAmy\n1975\n6\n28\n0\n31.5\n-78.8\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n5\n6\nAmy\n1975\n6\n28\n6\n32.4\n-78.7\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n6\n7\nAmy\n1975\n6\n28\n12\n33.3\n-78.0\ntropical depression\nNaN\n25\n1011\nNaN\nNaN\n\n\n7\n8\nAmy\n1975\n6\n28\n18\n34.0\n-77.0\ntropical depression\nNaN\n30\n1006\nNaN\nNaN\n\n\n8\n9\nAmy\n1975\n6\n29\n0\n34.4\n-75.8\ntropical storm\nNaN\n35\n1004\nNaN\nNaN\n\n\n9\n10\nAmy\n1975\n6\n29\n6\n34.0\n-74.8\ntropical storm\nNaN\n40\n1002\nNaN\nNaN\n\n\n\n\n\n\n\n\nurl = \"http://aeturrell.com/research\"\npage = requests.get(url)\npage.text[:300]\n\n'&lt;!DOCTYPE html&gt;\\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;&lt;head&gt;\\n\\n&lt;meta charset=\"utf-8\"&gt;\\n&lt;meta name=\"generator\" content=\"quarto-1.6.39\"&gt;\\n\\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\"&gt;\\n\\n&lt;meta name=\"author\" content=\"Arthur Turrell\"&gt;\\n'\n\n\n\nsoup = BeautifulSoup(page.text, \"html.parser\")\nprint(soup.prettify()[60000:60500])\n\nTJDdmFjYW5jaWVzJTJDQ09WSUQtMTk=\" data-index=\"1\" data-listing-date-modified-sort=\"NaN\" data-listing-date-sort=\"1651359600000\" data-listing-file-modified-sort=\"1687564711698\" data-listing-reading-time-sort=\"1\" data-listing-word-count-sort=\"182\"&gt;\n         &lt;div class=\"project-content listing-pub-info\"&gt;\n          &lt;p&gt;\n           Draca, Mirko, Emma Duchini, Roland Rathelot, Arthur Turrell, and Giulia Vattuone. Revolution in Progress? The Rise of Remote Work in the UK.\n           &lt;i&gt;\n            Univers\n\n\n\n# Get all paragraphs\nall_paras = soup.find_all(\"p\")\n# Just show one of the paras\nall_paras[1]\n\n&lt;p&gt;Blundell, Jack, Emma Duchini, Stefania Simion, and Arthur Turrell. \"Pay transparency and gender equality.\" &lt;i&gt;American Economic Journal: Economic Policy&lt;/i&gt; (2024). doi: &lt;a href=\"https://www.aeaweb.org/articles?id=10.1257/pol.20220766&amp;from=f\"&gt;&lt;code&gt;10.1257/pol.20220766&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n\n\nall_paras[1].text\n\n'Blundell, Jack, Emma Duchini, Stefania Simion, and Arthur Turrell. \"Pay transparency and gender equality.\" American Economic Journal: Economic Policy (2024). doi: 10.1257/pol.20220766'\n\n\n\nprojects = soup.find_all(\"div\", class_=\"project-content listing-pub-info\")\nprojects = [x.text.strip() for x in projects]\nprojects[:4]\n\n['Blundell, Jack, Emma Duchini, Stefania Simion, and Arthur Turrell. \"Pay transparency and gender equality.\" American Economic Journal: Economic Policy (2024). doi: 10.1257/pol.20220766',\n 'Botta, Federico, Robin Lovelace, Laura Gilbert, and Arthur Turrell. \"Packaging code and data for reproducible research: A case study of journey time statistics.\" Environment and Planning B: Urban Analytics and City Science (2024): 23998083241267331. doi: 10.1177/23998083241267331',\n 'Kalamara, Eleni, Arthur Turrell, Chris Redl, George Kapetanios, and Sujit Kapadia. \"Making text count: economic forecasting using newspaper text.\" Journal of Applied Econometrics 37, no. 5 (2022): 896-919. doi: 10.1002/jae.2907',\n 'Turrell, A., Speigner, B., Copple, D., Djumalieva, J. and Thurgood, J., 2021. Is the UK’s productivity puzzle mostly driven by occupational mismatch? An analysis using big data on job vacancies. Labour Economics, 71, p.102013. doi: 10.1016/j.labeco.2021.102013']\n\n\n\ndf_list = pd.read_html(\n    \"https://simple.wikipedia.org/wiki/FIFA_World_Cup\", match=\"Sweden\"\n)\n# Retrieve first and only entry from list of dataframes\ndf = df_list[0]\ndf.head()\n\n\n\n\n\n\n\n\nYears\nHosts\nWinners\nScore\nRunner's-up\nThird place\nScore.1\nFourth place\n\n\n\n\n0\n1930 Details\nUruguay\nUruguay\n4 - 2\nArgentina\nUnited States\n[note 1]\nYugoslavia\n\n\n1\n1934 Details\nItaly\nItaly\n2 - 1\nCzechoslovakia\nGermany\n3 - 2\nAustria\n\n\n2\n1938 Details\nFrance\nItaly\n4 - 2\nHungary\nBrazil\n4 - 2\nSweden\n\n\n3\n1950 Details\nBrazil\nUruguay\n2 - 1\nBrazil\nSweden\n[note 2]\nSpain\n\n\n4\n1954 Details\nSwitzerland\nWest Germany\n3 - 2\nHungary\nAustria\n3 - 1\nUruguay"
  },
  {
    "objectID": "practice/practice1127/practice1127-2.html",
    "href": "practice/practice1127/practice1127-2.html",
    "title": "Xuliqin Practice1127-2",
    "section": "",
    "text": "from bs4 import BeautifulSoup\nimport requests\nimport re\nimport pandas as pd\n\n\n# Downloading imdb top 250 movie's data\nurl = 'http://www.imdb.com/chart/top'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n\nmovies = soup.select('td.titleColumn')\ncrew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\nratings = [b.attrs.get('data-value')\n        for b in soup.select('td.posterColumn span[name=ir]')]\n\n\n# create a empty list for storing\n# movie information\nlist = []\n\n# Iterating over movies to extract\n# each movie's details\nfor index in range(0, len(movies)):\n    \n    # Separating movie into: 'place',\n    # 'title', 'year'\n    movie_string = movies[index].get_text()\n    movie = (' '.join(movie_string.split()).replace('.', ''))\n    movie_title = movie[len(str(index))+1:-7]\n    year = re.search(r'\\((.*?)\\)', movie_string).group(1)\n    place = movie[:len(str(index))-(len(movie))]\n    data = {\"place\": place,\n            \"movie_title\": movie_title,\n            \"rating\": ratings[index],\n            \"year\": year,\n            \"star_cast\": crew[index],\n            }\n    list.append(data)\n\n\nfor movie in list:\n    print(\n        movie[\"place\"],\n        \"-\",\n        movie[\"movie_title\"],\n        \"(\" + movie[\"year\"] + \") -\",\n        \"Starring:\",\n        movie[\"star_cast\"],\n        movie[\"rating\"],\n    )\n\n\n#saving the list as dataframe\n#then converting into .csv file\ndf = pd.DataFrame(list)\ndf.to_csv('./file/imdb_top_250_movies.csv',index=False)\n\n\n# Downloading imdb top 250 movie's data\nurl = 'http://www.imdb.com/chart/top'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\nmovies = soup.select('td.titleColumn')\ncrew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\nratings = [b.attrs.get('data-value')\n        for b in soup.select('td.posterColumn span[name=ir]')]\n\n\n\n\n# create a empty list for storing\n# movie information\nlist = []\n\n# Iterating over movies to extract\n# each movie's details\nfor index in range(0, len(movies)):\n    \n    # Separating movie into: 'place',\n    # 'title', 'year'\n    movie_string = movies[index].get_text()\n    movie = (' '.join(movie_string.split()).replace('.', ''))\n    movie_title = movie[len(str(index))+1:-7]\n    year = re.search(r'\\((.*?)\\)', movie_string).group(1)\n    place = movie[:len(str(index))-(len(movie))]\n    data = {\"place\": place,\n            \"movie_title\": movie_title,\n            \"rating\": ratings[index],\n            \"year\": year,\n            \"star_cast\": crew[index],\n            }\n    list.append(data)\n\n# printing movie details with its rating.\nfor movie in list:\n    print(movie['place'], '-', movie['movie_title'], '('+movie['year'] +\n        ') -', 'Starring:', movie['star_cast'], movie['rating'])\n\n\n##.......##\ndf = pd.DataFrame(list)\ndf.to_csv('./file/imdb_top_250_movies.csv',index=False)"
  },
  {
    "objectID": "labs/01_Getting_And_Knowing_Your_Data/WorldFoodFacts.html",
    "href": "labs/01_Getting_And_Knowing_Your_Data/WorldFoodFacts.html",
    "title": "01_Getting_&_Knowing_Your_Data -> World Food Facts",
    "section": "",
    "text": "Step 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\nimport pandas as pd\n\nfood = pd.read_csv(\n    \"./file/en.openfoodfacts.org.products.tsv\", sep=\"\\t\", low_memory=False\n) #使用low_memory=False这个参数会告诉 Pandas 在读取文件时使用更多的内存，从而避免某些类型的推断错误。\n\n\n\nStep 4. See the first 5 entries\n\n# 显示前5条数据，Display the first 5 rows of data\nfood.head(5)\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n0000000003087\nhttp://world-en.openfoodfacts.org/product/0000...\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n0000000004530\nhttp://world-en.openfoodfacts.org/product/0000...\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n0000000004559\nhttp://world-en.openfoodfacts.org/product/0000...\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n0000000016087\nhttp://world-en.openfoodfacts.org/product/0000...\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n0000000016094\nhttp://world-en.openfoodfacts.org/product/0000...\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\n# 获取行数，Get the number of rows\nnum_observations = food.shape[0]\nprint(f\"There are {num_observations} observation records in the dataset.\")\n\nThere are 356027 observation records in the dataset.\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n# 获取列数，Get the number of columns\nnum_columns = food.shape[1]\nprint(f\"There are {num_columns} columns in the dataset.\")\n\nThere are 163 columns in the dataset.\n\n\n\n\nStep 7. Print the name of all the columns.\n\nprint(food.columns.tolist())\n\n['code', 'url', 'creator', 'created_t', 'created_datetime', 'last_modified_t', 'last_modified_datetime', 'product_name', 'generic_name', 'quantity', 'packaging', 'packaging_tags', 'brands', 'brands_tags', 'categories', 'categories_tags', 'categories_en', 'origins', 'origins_tags', 'manufacturing_places', 'manufacturing_places_tags', 'labels', 'labels_tags', 'labels_en', 'emb_codes', 'emb_codes_tags', 'first_packaging_code_geo', 'cities', 'cities_tags', 'purchase_places', 'stores', 'countries', 'countries_tags', 'countries_en', 'ingredients_text', 'allergens', 'allergens_en', 'traces', 'traces_tags', 'traces_en', 'serving_size', 'no_nutriments', 'additives_n', 'additives', 'additives_tags', 'additives_en', 'ingredients_from_palm_oil_n', 'ingredients_from_palm_oil', 'ingredients_from_palm_oil_tags', 'ingredients_that_may_be_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil', 'ingredients_that_may_be_from_palm_oil_tags', 'nutrition_grade_uk', 'nutrition_grade_fr', 'pnns_groups_1', 'pnns_groups_2', 'states', 'states_tags', 'states_en', 'main_category', 'main_category_en', 'image_url', 'image_small_url', 'energy_100g', 'energy-from-fat_100g', 'fat_100g', 'saturated-fat_100g', '-butyric-acid_100g', '-caproic-acid_100g', '-caprylic-acid_100g', '-capric-acid_100g', '-lauric-acid_100g', '-myristic-acid_100g', '-palmitic-acid_100g', '-stearic-acid_100g', '-arachidic-acid_100g', '-behenic-acid_100g', '-lignoceric-acid_100g', '-cerotic-acid_100g', '-montanic-acid_100g', '-melissic-acid_100g', 'monounsaturated-fat_100g', 'polyunsaturated-fat_100g', 'omega-3-fat_100g', '-alpha-linolenic-acid_100g', '-eicosapentaenoic-acid_100g', '-docosahexaenoic-acid_100g', 'omega-6-fat_100g', '-linoleic-acid_100g', '-arachidonic-acid_100g', '-gamma-linolenic-acid_100g', '-dihomo-gamma-linolenic-acid_100g', 'omega-9-fat_100g', '-oleic-acid_100g', '-elaidic-acid_100g', '-gondoic-acid_100g', '-mead-acid_100g', '-erucic-acid_100g', '-nervonic-acid_100g', 'trans-fat_100g', 'cholesterol_100g', 'carbohydrates_100g', 'sugars_100g', '-sucrose_100g', '-glucose_100g', '-fructose_100g', '-lactose_100g', '-maltose_100g', '-maltodextrins_100g', 'starch_100g', 'polyols_100g', 'fiber_100g', 'proteins_100g', 'casein_100g', 'serum-proteins_100g', 'nucleotides_100g', 'salt_100g', 'sodium_100g', 'alcohol_100g', 'vitamin-a_100g', 'beta-carotene_100g', 'vitamin-d_100g', 'vitamin-e_100g', 'vitamin-k_100g', 'vitamin-c_100g', 'vitamin-b1_100g', 'vitamin-b2_100g', 'vitamin-pp_100g', 'vitamin-b6_100g', 'vitamin-b9_100g', 'folates_100g', 'vitamin-b12_100g', 'biotin_100g', 'pantothenic-acid_100g', 'silica_100g', 'bicarbonate_100g', 'potassium_100g', 'chloride_100g', 'calcium_100g', 'phosphorus_100g', 'iron_100g', 'magnesium_100g', 'zinc_100g', 'copper_100g', 'manganese_100g', 'fluoride_100g', 'selenium_100g', 'chromium_100g', 'molybdenum_100g', 'iodine_100g', 'caffeine_100g', 'taurine_100g', 'ph_100g', 'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g', 'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g', 'carbon-footprint_100g', 'nutrition-score-fr_100g', 'nutrition-score-uk_100g', 'glycemic-index_100g', 'water-hardness_100g']\n\n\n\n\nStep 8. What is the name of 105th column?\n\n# 获取第105个列的名称，get 105th column name\ncolumn_name_105 = food.columns[\n    104\n]  # 索引从0开始，所以第105个列的索引是104，The index starts from 0, so the index of the 105th column is 104\nprint(column_name_105)\n\n-glucose_100g\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\n# 获取第105列的数据类型, get type of the 105th column\ncolumn_type = food.dtypes.iloc[104]\nprint(f\"dtype('{column_type}')\")\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\n# 查看索引类型，View index type\nprint(food.index)\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\n# 获取第19个观察值的产品名称，Obtain the product name for the 19th observation value\nproduct_name_19th = food.iloc[18]['product_name']\nprint(product_name_19th)\n\nLotus Organic Brown Jasmine Rice"
  },
  {
    "objectID": "labs/01_Getting_And_Knowing_Your_Data/Chipotle.html",
    "href": "labs/01_Getting_And_Knowing_Your_Data/Chipotle.html",
    "title": "01_Getting_&_Knowing_Your_Data -> Chipotle",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv', sep= '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\n# Solution 1\n\nchipo.shape\n\n(4622, 5)\n\n\n\n# Solution 2\n\nchipo.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4622 entries, 0 to 4621\nData columns (total 5 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   order_id            4622 non-null   int64 \n 1   quantity            4622 non-null   int64 \n 2   item_name           4622 non-null   object\n 3   choice_description  3376 non-null   object\n 4   item_price          4622 non-null   object\ndtypes: int64(2), object(3)\nmemory usage: 180.7+ KB\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nchipo.shape[1]\n\n5\n\n\n\n\nStep 7. Print the name of all the columns.\n\nchipo.head(0)\n##chipo.columns   \n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n\n\n\n\n\n\n\nStep 8. How is the dataset indexed?\n\nchipo.index\n\nRangeIndex(start=0, stop=4622, step=1)\n\n\n\n\nStep 9. Which was the most-ordered item?\n\nchipo.groupby(by=\"item_name\").sum().sort_values('quantity',ascending=False).head(1)\n\n\n\n\n\n\n\n\norder_id\nquantity\nchoice_description\nitem_price\n\n\nitem_name\n\n\n\n\n\n\n\n\nChicken Bowl\n713926\n761\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...\n\n\n\n\n\n\n\n\n\nStep 10. For the most-ordered item, how many items were ordered?\n\nchipo.groupby(by=\"item_name\").sum().sort_values('quantity',ascending=False).head(1)\n\n\n\n\n\n\n\n\norder_id\nquantity\nchoice_description\nitem_price\n\n\nitem_name\n\n\n\n\n\n\n\n\nChicken Bowl\n713926\n761\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...\n\n\n\n\n\n\n\n\n\nStep 11. What was the most ordered item in the choice_description column?\n\nchipo.groupby(by=\"choice_description\").sum().sort_values('quantity',ascending=False).head(1)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nitem_price\n\n\nchoice_description\n\n\n\n\n\n\n\n\n[Diet Coke]\n123455\n159\nCanned SodaCanned SodaCanned Soda6 Pack Soft D...\n$2.18 $1.09 $1.09 $6.49 $2.18 $1.25 $1.09 $6.4...\n\n\n\n\n\n\n\n\n\nStep 12. How many items were orderd in total?\n\nchipo.item_name.count()\n\n4622\n\n\n\n\nStep 13. Turn the item price into a float\n\nStep 13.a. Check the item price type\n\nchipo.item_price.dtype\n\ndtype('O')\n\n\n\n\nStep 13.b. Create a lambda function and change the type of item price\n\ndollarizer = lambda x: float(x[1:-1])\nchipo.item_price = chipo.item_price.apply(dollarizer)\n\n\n\nStep 13.c. Check the item price type\n\nchipo.item_price.dtype\n\ndtype('float64')\n\n\n\n\n\nStep 14. How much was the revenue for the period in the dataset?\n\nrevenue =  (chipo.item_price * chipo.quantity).sum()\nprint('Revenue is : $ '+ str(revenue))\n\nRevenue is : $ 39237.02\n\n\n\n\nStep 15. How many orders were made in the period?\n\nchipo.order_id.value_counts().count()\n\n1834\n\n\n\n\nStep 16. What is the average revenue amount per order?\n\n# Solution 1\n\nchipo['revenue'] = chipo['quantity'] * chipo['item_price']\norder_grouped = chipo.groupby(by=['order_id']).sum()\norder_grouped['revenue'].mean()\n\n21.39423118865867\n\n\n\n\nStep 17. How many different items are sold?\n\nchipo.item_name.value_counts().count()\n\n50"
  },
  {
    "objectID": "labs/01_Getting_And_Knowing_Your_Data/Occupation.html",
    "href": "labs/01_Getting_And_Knowing_Your_Data/Occupation.html",
    "title": "01_Getting_&_Knowing_Your_Data -> Occupation",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\nusers = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user', \n                      sep='|', index_col='user_id')\n\n\n\nStep 4. See the first 25 entries\n\nusers.head(25)\n\n\n\n\n\n\n\n\nage\ngender\noccupation\nzip_code\n\n\nuser_id\n\n\n\n\n\n\n\n\n1\n24\nM\ntechnician\n85711\n\n\n2\n53\nF\nother\n94043\n\n\n3\n23\nM\nwriter\n32067\n\n\n4\n24\nM\ntechnician\n43537\n\n\n5\n33\nF\nother\n15213\n\n\n6\n42\nM\nexecutive\n98101\n\n\n7\n57\nM\nadministrator\n91344\n\n\n8\n36\nM\nadministrator\n05201\n\n\n9\n29\nM\nstudent\n01002\n\n\n10\n53\nM\nlawyer\n90703\n\n\n11\n39\nF\nother\n30329\n\n\n12\n28\nF\nother\n06405\n\n\n13\n47\nM\neducator\n29206\n\n\n14\n45\nM\nscientist\n55106\n\n\n15\n49\nF\neducator\n97301\n\n\n16\n21\nM\nentertainment\n10309\n\n\n17\n30\nM\nprogrammer\n06355\n\n\n18\n35\nF\nother\n37212\n\n\n19\n40\nM\nlibrarian\n02138\n\n\n20\n42\nF\nhomemaker\n95660\n\n\n21\n26\nM\nwriter\n30068\n\n\n22\n25\nM\nwriter\n40206\n\n\n23\n30\nF\nartist\n48197\n\n\n24\n21\nF\nartist\n94533\n\n\n25\n39\nM\nengineer\n55107\n\n\n\n\n\n\n\n\n\nStep 5. See the last 10 entries\n\nusers.tail(10)\n\n\n\n\n\n\n\n\nage\ngender\noccupation\nzip_code\n\n\nuser_id\n\n\n\n\n\n\n\n\n934\n61\nM\nengineer\n22902\n\n\n935\n42\nM\ndoctor\n66221\n\n\n936\n24\nM\nother\n32789\n\n\n937\n48\nM\neducator\n98072\n\n\n938\n38\nF\ntechnician\n55038\n\n\n939\n26\nF\nstudent\n33319\n\n\n940\n32\nM\nadministrator\n02215\n\n\n941\n20\nM\nstudent\n97229\n\n\n942\n48\nF\nlibrarian\n78209\n\n\n943\n22\nM\nstudent\n77841\n\n\n\n\n\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\nusers.shape[0]\n\n943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\nusers.shape[1]\n\n4\n\n\n\n\nStep 8. Print the name of all the columns.\n\nusers.columns\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n# \"the index\" (aka \"the labels\")\nusers.index\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\nusers.dtypes\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\nusers.occupation\n\n#or\n\nusers['occupation']\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nusers.occupation.nunique()\n#or by using value_counts() which returns the count of unique elements\n#users.occupation.value_counts().count()\n\n21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\n#Because \"most\" is asked\nusers.occupation.value_counts().head(1).index[0]\n\n#or\n#to have the top 5\n\n# users.occupation.value_counts().head()\n\n'student'\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nusers.describe() #Notice: by default, only the numeric columns are returned. \n\n\n\n\n\n\n\n\nage\n\n\n\n\ncount\n943.000000\n\n\nmean\n34.051962\n\n\nstd\n12.192740\n\n\nmin\n7.000000\n\n\n25%\n25.000000\n\n\n50%\n31.000000\n\n\n75%\n43.000000\n\n\nmax\n73.000000\n\n\n\n\n\n\n\n\n\nStep 15. Summarize all the columns\n\nusers.describe(include = \"all\") #Notice: By default, only the numeric columns are returned.\n\n\n\n\n\n\n\n\nage\ngender\noccupation\nzip_code\n\n\n\n\ncount\n943.000000\n943\n943\n943\n\n\nunique\nNaN\n2\n21\n795\n\n\ntop\nNaN\nM\nstudent\n55414\n\n\nfreq\nNaN\n670\n196\n9\n\n\nmean\n34.051962\nNaN\nNaN\nNaN\n\n\nstd\n12.192740\nNaN\nNaN\nNaN\n\n\nmin\n7.000000\nNaN\nNaN\nNaN\n\n\n25%\n25.000000\nNaN\nNaN\nNaN\n\n\n50%\n31.000000\nNaN\nNaN\nNaN\n\n\n75%\n43.000000\nNaN\nNaN\nNaN\n\n\nmax\n73.000000\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nStep 16. Summarize only the occupation column\n\nusers.occupation.describe()\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nusers.age.mean()\n\n34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\nusers.age.value_counts().tail() #7, 10, 11, 66 and 73 years -&gt; only 1 occurrence\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: count, dtype: int64"
  },
  {
    "objectID": "labs/02_Filtering_And_Sorting/Chipotle.html",
    "href": "labs/02_Filtering_And_Sorting/Chipotle.html",
    "title": "02_Filtering_&_Sorting -> Chipotle",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called chipo.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. How many products cost more than $10.00?\n\n# clean the item_price column and transform it in a float\n# 清理[item_price]列的数据，将其转换成float类型。\n# float(value[1 : -1])表示字符串切片，将第2位至最后一位截取出来，这里作用是将价格最前面的$符号过滤掉，只保留后面的数字。\n# value的取值就是循环取后面[item_price]列的所有值，全部转换成浮点数，保存至prices这个列表里。\nprices = [float(value[1 : -1]) for value in chipo.item_price]\n\n# reassign the column with the cleaned prices\n# 重新将清理过后的数据赋值给[item_price]列。\nchipo.item_price = prices\n\n# delete the duplicates in item_name and quantity\n# 删除掉[item_name]列与[quantity]列中的重复项。\n# 后面跟的item_name、quantity、choice_description表示参考的列名，这里表示一行里这参考的三列都重复就删除这一行。默认参考所有列。\nchipo_filtered = chipo.drop_duplicates(['item_name','quantity','choice_description'])\n\n# chipo_filtered\n\n# select only the products with quantity equals to 1\n# 筛选出数量为1的商品。\nchipo_one_prod = chipo_filtered[chipo_filtered.quantity == 1]\nchipo_one_prod\n\n# 方法一：\n# 使用nunique()获取指定坐轴中不同元素的数量。\n# 这里显示价格大于10的商品的数量。\nchipo_one_prod[chipo_one_prod['item_price']&gt;10].item_name.nunique()\n# 这里显示所有价格大于10的商品，返回一个DataFrame。\nchipo_one_prod[chipo_one_prod['item_price']&gt;10]\n\n\n# 方法二： \n# 直接使用query()函数查询。函数作用是使用布尔表达式来查询DataFrame的列，最后返回的DataFrame类型的查询结果。\n# 这里使用'item_price &gt; 10'这个表达式，最后得到一个[item_price]列的值都大于10的DataFrame。再使用item_name.nunique()获取商品名称并得到名称去重之后的数量。\nchipo.query('item_price &gt; 10').item_name.nunique()\n\n31\n\n\n\n\nStep 5. What is the price of each item?\n\nprint a data frame with only two columns item_name and item_price\n\n# delete the duplicates in item_name and quantity\n# 删除[item_name]与[quantity]中的重复项。\nchipo_filtered = chipo.drop_duplicates(['item_name','quantity'])\n\n# []里的是筛选条件，这里是筛选出[item_name]的值为'Chicken Bowl'，并且[quantity]的值为1的数据。\nchipo[(chipo['item_name'] == 'Chicken Bowl') & (chipo['quantity'] == 1)]\n\n# select only the products with quantity equals to 1\n# 筛选出数量为1的商品。\nchipo_one_prod = chipo_filtered[chipo_filtered.quantity == 1]\n\n# select only the item_name and item_price columns\n# 将[item_name]与[item_price]这两列单独筛选出来。\nprice_per_item = chipo_one_prod[['item_name', 'item_price']]\n\n# sort the values from the most to less expensive\n# 按照价格从高到底排列。\n# 使用sort_values()函数进行排序，by表示排序要参考的列，ascending=False表示降序排序，默认升序排序。\nprice_per_item.sort_values(by = \"item_price\", ascending = False).head(20)\n\n\n\n\n\n\n\n\nitem_name\nitem_price\n\n\n\n\n606\nSteak Salad Bowl\n11.89\n\n\n1229\nBarbacoa Salad Bowl\n11.89\n\n\n1132\nCarnitas Salad Bowl\n11.89\n\n\n7\nSteak Burrito\n11.75\n\n\n168\nBarbacoa Crispy Tacos\n11.75\n\n\n39\nBarbacoa Bowl\n11.75\n\n\n738\nVeggie Soft Tacos\n11.25\n\n\n186\nVeggie Salad Bowl\n11.25\n\n\n62\nVeggie Bowl\n11.25\n\n\n57\nVeggie Burrito\n11.25\n\n\n250\nChicken Salad\n10.98\n\n\n5\nChicken Bowl\n10.98\n\n\n8\nSteak Soft Tacos\n9.25\n\n\n554\nCarnitas Crispy Tacos\n9.25\n\n\n237\nCarnitas Soft Tacos\n9.25\n\n\n56\nBarbacoa Soft Tacos\n9.25\n\n\n92\nSteak Crispy Tacos\n9.25\n\n\n664\nSteak Salad\n8.99\n\n\n54\nSteak Bowl\n8.99\n\n\n3750\nCarnitas Salad\n8.99\n\n\n\n\n\n\n\n\n\n\nStep 6. Sort by the name of the item\n\nchipo.item_name.sort_values()\n\n# OR\n\nchipo.sort_values(by = \"item_name\")\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n3389\n1360\n2\n6 Pack Soft Drink\n[Diet Coke]\n12.98\n\n\n341\n148\n1\n6 Pack Soft Drink\n[Diet Coke]\n6.49\n\n\n1849\n749\n1\n6 Pack Soft Drink\n[Coke]\n6.49\n\n\n1860\n754\n1\n6 Pack Soft Drink\n[Diet Coke]\n6.49\n\n\n2713\n1076\n1\n6 Pack Soft Drink\n[Coke]\n6.49\n\n\n...\n...\n...\n...\n...\n...\n\n\n2384\n948\n1\nVeggie Soft Tacos\n[Roasted Chili Corn Salsa, [Fajita Vegetables,...\n8.75\n\n\n781\n322\n1\nVeggie Soft Tacos\n[Fresh Tomato Salsa, [Black Beans, Cheese, Sou...\n8.75\n\n\n2851\n1132\n1\nVeggie Soft Tacos\n[Roasted Chili Corn Salsa (Medium), [Black Bea...\n8.49\n\n\n1699\n688\n1\nVeggie Soft Tacos\n[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...\n11.25\n\n\n1395\n567\n1\nVeggie Soft Tacos\n[Fresh Tomato Salsa (Mild), [Pinto Beans, Rice...\n8.49\n\n\n\n\n4622 rows × 5 columns\n\n\n\n\n\nStep 7. What was the quantity of the most expensive item ordered?\n\nchipo.sort_values(by = \"item_price\", ascending = False).head(1)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n3598\n1443\n15\nChips and Fresh Tomato Salsa\nNaN\n44.25\n\n\n\n\n\n\n\n\n\nStep 8. How many times was a Veggie Salad Bowl ordered?\n\nchipo_salad = chipo[chipo.item_name == \"Veggie Salad Bowl\"]\n# chipo_salad = chipo.query('item_name == \"Veggie Salad Bowl\"')\n\nlen(chipo_salad)\n\n18\n\n\n\n\nStep 9. How many times did someone order more than one Canned Soda?\n\nchipo_drink_steak_bowl = chipo[(chipo.item_name == \"Canned Soda\") & (chipo.quantity &gt; 1)]\n# chipo_drink_steak_bowl = chipo.query('item_name == \"Canned Soda\" & quantity &gt; 1')\n\nlen(chipo_drink_steak_bowl)\n\n20"
  },
  {
    "objectID": "labs/02_Filtering_And_Sorting/Euro12.html",
    "href": "labs/02_Filtering_And_Sorting/Euro12.html",
    "title": "02_Filtering_&_Sorting -> Euro12",
    "section": "",
    "text": "This time we are going to pull data directly from the internet.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv', sep=',')\neuro12\n\n\n\n\n\n\n\n\nTeam\nGoals\nShots on target\nShots off target\nShooting Accuracy\n% Goals-to-shots\nTotal shots (inc. Blocked)\nHit Woodwork\nPenalty goals\nPenalties not scored\n...\nSaves made\nSaves-to-shots ratio\nFouls Won\nFouls Conceded\nOffsides\nYellow Cards\nRed Cards\nSubs on\nSubs off\nPlayers Used\n\n\n\n\n0\nCroatia\n4\n13\n12\n51.9%\n16.0%\n32\n0\n0\n0\n...\n13\n81.3%\n41\n62\n2\n9\n0\n9\n9\n16\n\n\n1\nCzech Republic\n4\n13\n18\n41.9%\n12.9%\n39\n0\n0\n0\n...\n9\n60.1%\n53\n73\n8\n7\n0\n11\n11\n19\n\n\n2\nDenmark\n4\n10\n10\n50.0%\n20.0%\n27\n1\n0\n0\n...\n10\n66.7%\n25\n38\n8\n4\n0\n7\n7\n15\n\n\n3\nEngland\n5\n11\n18\n50.0%\n17.2%\n40\n0\n0\n0\n...\n22\n88.1%\n43\n45\n6\n5\n0\n11\n11\n16\n\n\n4\nFrance\n3\n22\n24\n37.9%\n6.5%\n65\n1\n0\n0\n...\n6\n54.6%\n36\n51\n5\n6\n0\n11\n11\n19\n\n\n5\nGermany\n10\n32\n32\n47.8%\n15.6%\n80\n2\n1\n0\n...\n10\n62.6%\n63\n49\n12\n4\n0\n15\n15\n17\n\n\n6\nGreece\n5\n8\n18\n30.7%\n19.2%\n32\n1\n1\n1\n...\n13\n65.1%\n67\n48\n12\n9\n1\n12\n12\n20\n\n\n7\nItaly\n6\n34\n45\n43.0%\n7.5%\n110\n2\n0\n0\n...\n20\n74.1%\n101\n89\n16\n16\n0\n18\n18\n19\n\n\n8\nNetherlands\n2\n12\n36\n25.0%\n4.1%\n60\n2\n0\n0\n...\n12\n70.6%\n35\n30\n3\n5\n0\n7\n7\n15\n\n\n9\nPoland\n2\n15\n23\n39.4%\n5.2%\n48\n0\n0\n0\n...\n6\n66.7%\n48\n56\n3\n7\n1\n7\n7\n17\n\n\n10\nPortugal\n6\n22\n42\n34.3%\n9.3%\n82\n6\n0\n0\n...\n10\n71.5%\n73\n90\n10\n12\n0\n14\n14\n16\n\n\n11\nRepublic of Ireland\n1\n7\n12\n36.8%\n5.2%\n28\n0\n0\n0\n...\n17\n65.4%\n43\n51\n11\n6\n1\n10\n10\n17\n\n\n12\nRussia\n5\n9\n31\n22.5%\n12.5%\n59\n2\n0\n0\n...\n10\n77.0%\n34\n43\n4\n6\n0\n7\n7\n16\n\n\n13\nSpain\n12\n42\n33\n55.9%\n16.0%\n100\n0\n1\n0\n...\n15\n93.8%\n102\n83\n19\n11\n0\n17\n17\n18\n\n\n14\nSweden\n5\n17\n19\n47.2%\n13.8%\n39\n3\n0\n0\n...\n8\n61.6%\n35\n51\n7\n7\n0\n9\n9\n18\n\n\n15\nUkraine\n2\n7\n26\n21.2%\n6.0%\n38\n0\n0\n0\n...\n13\n76.5%\n48\n31\n4\n5\n0\n9\n9\n18\n\n\n\n\n16 rows × 35 columns\n\n\n\n\n\nStep 4. Select only the Goal column.\n\neuro12.Goals\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\neuro12.shape[0]\n\n16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\n# filter only giving the column names\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\ndiscipline\n\n\n\n\n\n\n\n\nTeam\nYellow Cards\nRed Cards\n\n\n\n\n0\nCroatia\n9\n0\n\n\n1\nCzech Republic\n7\n0\n\n\n2\nDenmark\n4\n0\n\n\n3\nEngland\n5\n0\n\n\n4\nFrance\n6\n0\n\n\n5\nGermany\n4\n0\n\n\n6\nGreece\n9\n1\n\n\n7\nItaly\n16\n0\n\n\n8\nNetherlands\n5\n0\n\n\n9\nPoland\n7\n1\n\n\n10\nPortugal\n12\n0\n\n\n11\nRepublic of Ireland\n6\n1\n\n\n12\nRussia\n6\n0\n\n\n13\nSpain\n11\n0\n\n\n14\nSweden\n7\n0\n\n\n15\nUkraine\n5\n0\n\n\n\n\n\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\ndiscipline.sort_values(['Red Cards', 'Yellow Cards'], ascending = False)\n\n\n\n\n\n\n\n\nTeam\nYellow Cards\nRed Cards\n\n\n\n\n6\nGreece\n9\n1\n\n\n9\nPoland\n7\n1\n\n\n11\nRepublic of Ireland\n6\n1\n\n\n7\nItaly\n16\n0\n\n\n10\nPortugal\n12\n0\n\n\n13\nSpain\n11\n0\n\n\n0\nCroatia\n9\n0\n\n\n1\nCzech Republic\n7\n0\n\n\n14\nSweden\n7\n0\n\n\n4\nFrance\n6\n0\n\n\n12\nRussia\n6\n0\n\n\n3\nEngland\n5\n0\n\n\n8\nNetherlands\n5\n0\n\n\n15\nUkraine\n5\n0\n\n\n2\nDenmark\n4\n0\n\n\n5\nGermany\n4\n0\n\n\n\n\n\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\nround(discipline['Yellow Cards'].mean())\n\n7\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\neuro12[euro12.Goals &gt; 6]\n\n\n\n\n\n\n\n\nTeam\nGoals\nShots on target\nShots off target\nShooting Accuracy\n% Goals-to-shots\nTotal shots (inc. Blocked)\nHit Woodwork\nPenalty goals\nPenalties not scored\n...\nSaves made\nSaves-to-shots ratio\nFouls Won\nFouls Conceded\nOffsides\nYellow Cards\nRed Cards\nSubs on\nSubs off\nPlayers Used\n\n\n\n\n5\nGermany\n10\n32\n32\n47.8%\n15.6%\n80\n2\n1\n0\n...\n10\n62.6%\n63\n49\n12\n4\n0\n15\n15\n17\n\n\n13\nSpain\n12\n42\n33\n55.9%\n16.0%\n100\n0\n1\n0\n...\n15\n93.8%\n102\n83\n19\n11\n0\n17\n17\n18\n\n\n\n\n2 rows × 35 columns\n\n\n\n\n\nStep 11. Select the teams that start with G\n\neuro12[euro12.Team.str.startswith('G')]\n\n\n\n\n\n\n\n\nTeam\nGoals\nShots on target\nShots off target\nShooting Accuracy\n% Goals-to-shots\nTotal shots (inc. Blocked)\nHit Woodwork\nPenalty goals\nPenalties not scored\n...\nSaves made\nSaves-to-shots ratio\nFouls Won\nFouls Conceded\nOffsides\nYellow Cards\nRed Cards\nSubs on\nSubs off\nPlayers Used\n\n\n\n\n5\nGermany\n10\n32\n32\n47.8%\n15.6%\n80\n2\n1\n0\n...\n10\n62.6%\n63\n49\n12\n4\n0\n15\n15\n17\n\n\n6\nGreece\n5\n8\n18\n30.7%\n19.2%\n32\n1\n1\n1\n...\n13\n65.1%\n67\n48\n12\n9\n1\n12\n12\n20\n\n\n\n\n2 rows × 35 columns\n\n\n\n\n\nStep 12. Select the first 7 columns\n# use .iloc to slices via the position of the passed integers\n# : means all, 0:7 means from 0 to 7\n\neuro12.iloc[: , 0:7]\n\n\nStep 13. Select all columns except the last 3.\n\n# use negative to exclude the last 3 columns\n\neuro12.iloc[: , :-3]\n\n\n\n\n\n\n\n\nTeam\nGoals\nShots on target\nShots off target\nShooting Accuracy\n% Goals-to-shots\nTotal shots (inc. Blocked)\nHit Woodwork\nPenalty goals\nPenalties not scored\n...\nClean Sheets\nBlocks\nGoals conceded\nSaves made\nSaves-to-shots ratio\nFouls Won\nFouls Conceded\nOffsides\nYellow Cards\nRed Cards\n\n\n\n\n0\nCroatia\n4\n13\n12\n51.9%\n16.0%\n32\n0\n0\n0\n...\n0\n10\n3\n13\n81.3%\n41\n62\n2\n9\n0\n\n\n1\nCzech Republic\n4\n13\n18\n41.9%\n12.9%\n39\n0\n0\n0\n...\n1\n10\n6\n9\n60.1%\n53\n73\n8\n7\n0\n\n\n2\nDenmark\n4\n10\n10\n50.0%\n20.0%\n27\n1\n0\n0\n...\n1\n10\n5\n10\n66.7%\n25\n38\n8\n4\n0\n\n\n3\nEngland\n5\n11\n18\n50.0%\n17.2%\n40\n0\n0\n0\n...\n2\n29\n3\n22\n88.1%\n43\n45\n6\n5\n0\n\n\n4\nFrance\n3\n22\n24\n37.9%\n6.5%\n65\n1\n0\n0\n...\n1\n7\n5\n6\n54.6%\n36\n51\n5\n6\n0\n\n\n5\nGermany\n10\n32\n32\n47.8%\n15.6%\n80\n2\n1\n0\n...\n1\n11\n6\n10\n62.6%\n63\n49\n12\n4\n0\n\n\n6\nGreece\n5\n8\n18\n30.7%\n19.2%\n32\n1\n1\n1\n...\n1\n23\n7\n13\n65.1%\n67\n48\n12\n9\n1\n\n\n7\nItaly\n6\n34\n45\n43.0%\n7.5%\n110\n2\n0\n0\n...\n2\n18\n7\n20\n74.1%\n101\n89\n16\n16\n0\n\n\n8\nNetherlands\n2\n12\n36\n25.0%\n4.1%\n60\n2\n0\n0\n...\n0\n9\n5\n12\n70.6%\n35\n30\n3\n5\n0\n\n\n9\nPoland\n2\n15\n23\n39.4%\n5.2%\n48\n0\n0\n0\n...\n0\n8\n3\n6\n66.7%\n48\n56\n3\n7\n1\n\n\n10\nPortugal\n6\n22\n42\n34.3%\n9.3%\n82\n6\n0\n0\n...\n2\n11\n4\n10\n71.5%\n73\n90\n10\n12\n0\n\n\n11\nRepublic of Ireland\n1\n7\n12\n36.8%\n5.2%\n28\n0\n0\n0\n...\n0\n23\n9\n17\n65.4%\n43\n51\n11\n6\n1\n\n\n12\nRussia\n5\n9\n31\n22.5%\n12.5%\n59\n2\n0\n0\n...\n0\n8\n3\n10\n77.0%\n34\n43\n4\n6\n0\n\n\n13\nSpain\n12\n42\n33\n55.9%\n16.0%\n100\n0\n1\n0\n...\n5\n8\n1\n15\n93.8%\n102\n83\n19\n11\n0\n\n\n14\nSweden\n5\n17\n19\n47.2%\n13.8%\n39\n3\n0\n0\n...\n1\n12\n5\n8\n61.6%\n35\n51\n7\n7\n0\n\n\n15\nUkraine\n2\n7\n26\n21.2%\n6.0%\n38\n0\n0\n0\n...\n0\n4\n4\n13\n76.5%\n48\n31\n4\n5\n0\n\n\n\n\n16 rows × 32 columns\n\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\n# .loc is another way to slice, using the labels of the columns and indexes\n\neuro12.loc[euro12.Team.isin(['England', 'Italy', 'Russia']), ['Team','Shooting Accuracy']]\n\n\n\n\n\n\n\n\nTeam\nShooting Accuracy\n\n\n\n\n3\nEngland\n50.0%\n\n\n7\nItaly\n43.0%\n\n\n12\nRussia\n22.5%"
  },
  {
    "objectID": "labs/03_Visualization/Scores.html",
    "href": "labs/03_Visualization/Scores.html",
    "title": "03_Visualization -> Scores",
    "section": "",
    "text": "Introduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib inline\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\nraw_data = {'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'], \n            'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'], \n            'female': [0, 1, 1, 0, 1],\n            'age': [42, 52, 36, 24, 73], \n            'preTestScore': [4, 24, 31, 2, 3],\n            'postTestScore': [25, 94, 57, 62, 70]}\n\ndf = pd.DataFrame(raw_data, columns = ['first_name', 'last_name', 'age', 'female', 'preTestScore', 'postTestScore'])\n\ndf\n\n\n\n\n\n\n\n\nfirst_name\nlast_name\nage\nfemale\npreTestScore\npostTestScore\n\n\n\n\n0\nJason\nMiller\n42\n0\n4\n25\n\n\n1\nMolly\nJacobson\n52\n1\n24\n94\n\n\n2\nTina\nAli\n36\n1\n31\n57\n\n\n3\nJake\nMilner\n24\n0\n2\n62\n\n\n4\nAmy\nCooze\n73\n1\n3\n70\n\n\n\n\n\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df.preTestScore, df.postTestScore, s=df.age)\n\n#set labels and titles\nplt.title(\"preTestScore x postTestScore\")\nplt.xlabel('preTestScore')\nplt.ylabel('preTestScore')\n\nText(0, 0.5, 'preTestScore')\n\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\nplt.scatter(df.preTestScore, df.postTestScore, s= df.postTestScore * 4.5, c = df.female)\n\n#set labels and titles\nplt.title(\"preTestScore x postTestScore\")\nplt.xlabel('preTestScore')\nplt.ylabel('preTestScore')\n\nText(0, 0.5, 'preTestScore')\n\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\n\n# 问题：柱状图显示所有学生年龄\n# Question: The bar chart displays the age of all students\n\n# 回答，answer\n# 绘制年龄的柱状图\nplt.figure(figsize=(10, 6))\nplt.bar(df['first_name'] + ' ' + df['last_name'], df['age'], color='skyblue')\nplt.xlabel('name')\nplt.ylabel('age')\nplt.title('age of all students')\nplt.show()"
  },
  {
    "objectID": "labs/04_Automated_Slides_with_Quarto/Automated_Slides.html",
    "href": "labs/04_Automated_Slides_with_Quarto/Automated_Slides.html",
    "title": "04_Automated_Slides_with_Quarto -> Automated Slides with Quarto",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "labs/04_Automated_Slides_with_Quarto/Automated_Slides.html#here-are-some-code-outputs",
    "href": "labs/04_Automated_Slides_with_Quarto/Automated_Slides.html#here-are-some-code-outputs",
    "title": "04_Automated_Slides_with_Quarto -> Automated Slides with Quarto",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html",
    "href": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html",
    "title": "lab2",
    "section": "",
    "text": "This is some text\nAs is this"
  },
  {
    "objectID": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html#introduction",
    "href": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html#introduction",
    "title": "lab2",
    "section": "",
    "text": "This is some text\nAs is this"
  },
  {
    "objectID": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html#here-are-some-code-outputs",
    "href": "labs/04_Automated_Slides_with_Quarto/file/Automated_Slides.html#here-are-some-code-outputs",
    "title": "lab2",
    "section": "Here Are Some Code Outputs",
    "text": "Here Are Some Code Outputs"
  }
]