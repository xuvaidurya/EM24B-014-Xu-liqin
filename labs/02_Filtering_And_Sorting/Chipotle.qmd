---
title: "02_Filtering_&_Sorting -> Chipotle"
output: 
  html_document:
    toc: FALSE
---

This time we are going to pull data directly from the internet.
Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.

### Step 1. Import the necessary libraries
```{python}
import pandas as pd
```

### Step 2. Import the dataset from this [address](https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv). 

### Step 3. Assign it to a variable called chipo.
```{python}
url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'

chipo = pd.read_csv(url, sep = '\t')
```

### Step 4. How many products cost more than $10.00?
```{python}
# clean the item_price column and transform it in a float
# 清理[item_price]列的数据，将其转换成float类型。
# float(value[1 : -1])表示字符串切片，将第2位至最后一位截取出来，这里作用是将价格最前面的$符号过滤掉，只保留后面的数字。
# value的取值就是循环取后面[item_price]列的所有值，全部转换成浮点数，保存至prices这个列表里。
prices = [float(value[1 : -1]) for value in chipo.item_price]

# reassign the column with the cleaned prices
# 重新将清理过后的数据赋值给[item_price]列。
chipo.item_price = prices

# delete the duplicates in item_name and quantity
# 删除掉[item_name]列与[quantity]列中的重复项。
# 后面跟的item_name、quantity、choice_description表示参考的列名，这里表示一行里这参考的三列都重复就删除这一行。默认参考所有列。
chipo_filtered = chipo.drop_duplicates(['item_name','quantity','choice_description'])

# chipo_filtered

# select only the products with quantity equals to 1
# 筛选出数量为1的商品。
chipo_one_prod = chipo_filtered[chipo_filtered.quantity == 1]
chipo_one_prod

# 方法一：
# 使用nunique()获取指定坐轴中不同元素的数量。
# 这里显示价格大于10的商品的数量。
chipo_one_prod[chipo_one_prod['item_price']>10].item_name.nunique()
# 这里显示所有价格大于10的商品，返回一个DataFrame。
chipo_one_prod[chipo_one_prod['item_price']>10]


# 方法二： 
# 直接使用query()函数查询。函数作用是使用布尔表达式来查询DataFrame的列，最后返回的DataFrame类型的查询结果。
# 这里使用'item_price > 10'这个表达式，最后得到一个[item_price]列的值都大于10的DataFrame。再使用item_name.nunique()获取商品名称并得到名称去重之后的数量。
chipo.query('item_price > 10').item_name.nunique()
```

### Step 5. What is the price of each item? 
###### print a data frame with only two columns item_name and item_price
```{python}
# delete the duplicates in item_name and quantity
# 删除[item_name]与[quantity]中的重复项。
chipo_filtered = chipo.drop_duplicates(['item_name','quantity'])

# []里的是筛选条件，这里是筛选出[item_name]的值为'Chicken Bowl'，并且[quantity]的值为1的数据。
chipo[(chipo['item_name'] == 'Chicken Bowl') & (chipo['quantity'] == 1)]

# select only the products with quantity equals to 1
# 筛选出数量为1的商品。
chipo_one_prod = chipo_filtered[chipo_filtered.quantity == 1]

# select only the item_name and item_price columns
# 将[item_name]与[item_price]这两列单独筛选出来。
price_per_item = chipo_one_prod[['item_name', 'item_price']]

# sort the values from the most to less expensive
# 按照价格从高到底排列。
# 使用sort_values()函数进行排序，by表示排序要参考的列，ascending=False表示降序排序，默认升序排序。
price_per_item.sort_values(by = "item_price", ascending = False).head(20)
```

### Step 6. Sort by the name of the item
```{python}
chipo.item_name.sort_values()

# OR

chipo.sort_values(by = "item_name")
```

### Step 7. What was the quantity of the most expensive item ordered?
```{python}
chipo.sort_values(by = "item_price", ascending = False).head(1)
```

### Step 8. How many times was a Veggie Salad Bowl ordered?
```{python}
chipo_salad = chipo[chipo.item_name == "Veggie Salad Bowl"]
# chipo_salad = chipo.query('item_name == "Veggie Salad Bowl"')

len(chipo_salad)
```

### Step 9. How many times did someone order more than one Canned Soda?
```{python}
chipo_drink_steak_bowl = chipo[(chipo.item_name == "Canned Soda") & (chipo.quantity > 1)]
# chipo_drink_steak_bowl = chipo.query('item_name == "Canned Soda" & quantity > 1')

len(chipo_drink_steak_bowl)
```